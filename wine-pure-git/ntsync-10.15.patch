From 94608af1870cb7a7841d3f30543403048bad0dc7 Mon Sep 17 00:00:00 2001
From: Elizabeth Figura <zfigura@codeweavers.com>
Date: Mon, 8 Mar 2021 18:07:23 -0600
Subject: [PATCH 01/16] ntdll: Introduce a helper to wait on an server-side
 sync object.

Some objects like async or completion waits are internal only, and their
sync logic is still a bit complicated as they have various server side
effects. They are only waited on alone, we can keep using server-side
syncs for them.

Signed-off-by: Vasiliy Stelmachenok <ventureo@cachyos.org>
---
 dlls/ntdll/unix/server.c       | 15 +++++++++++++++
 dlls/ntdll/unix/sync.c         |  4 ++--
 dlls/ntdll/unix/unix_private.h |  3 ++-
 3 files changed, 19 insertions(+), 3 deletions(-)

diff --git a/dlls/ntdll/unix/server.c b/dlls/ntdll/unix/server.c
index d44b4b90f3d..bbca17aee8f 100644
--- a/dlls/ntdll/unix/server.c
+++ b/dlls/ntdll/unix/server.c
@@ -818,6 +818,21 @@ unsigned int server_wait( const union select_op *select_op, data_size_t size, UI
 }
 
 
+/* helper function to perform a server-side wait on an internal handle without
+ * using the fast synchronization path */
+unsigned int server_wait_for_object( HANDLE handle, BOOL alertable, const LARGE_INTEGER *timeout )
+{
+    union select_op select_op;
+    UINT flags = SELECT_INTERRUPTIBLE;
+
+    if (alertable) flags |= SELECT_ALERTABLE;
+
+    select_op.wait.op = SELECT_WAIT;
+    select_op.wait.handles[0] = wine_server_obj_handle( handle );
+    return server_wait( &select_op, offsetof( union select_op, wait.handles[1] ), flags, timeout );
+}
+
+
 /***********************************************************************
  *              NtContinue  (NTDLL.@)
  */
diff --git a/dlls/ntdll/unix/sync.c b/dlls/ntdll/unix/sync.c
index 9ba56490c33..dd18c948d22 100644
--- a/dlls/ntdll/unix/sync.c
+++ b/dlls/ntdll/unix/sync.c
@@ -2328,7 +2328,7 @@ NTSTATUS WINAPI NtRemoveIoCompletion( HANDLE handle, ULONG_PTR *key, ULONG_PTR *
     }
     SERVER_END_REQ;
     if (status != STATUS_PENDING) return status;
-    if (!timeout || timeout->QuadPart) status = NtWaitForSingleObject( wait_handle, FALSE, timeout );
+    if (!timeout || timeout->QuadPart) status = server_wait_for_object( wait_handle, FALSE, timeout );
     else                               status = STATUS_TIMEOUT;
     if (status != WAIT_OBJECT_0) return status;
 
@@ -2392,7 +2392,7 @@ NTSTATUS WINAPI NtRemoveIoCompletionEx( HANDLE handle, FILE_IO_COMPLETION_INFORM
         assert( status == STATUS_USER_APC );
         goto done;
     }
-    if (!timeout || timeout->QuadPart) status = NtWaitForSingleObject( wait_handle, alertable, timeout );
+    if (!timeout || timeout->QuadPart) status = server_wait_for_object( wait_handle, alertable, timeout );
     else                               status = STATUS_TIMEOUT;
     if (status != WAIT_OBJECT_0) goto done;
 
diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
index f514f61dd60..75c04e5ec15 100644
--- a/dlls/ntdll/unix/unix_private.h
+++ b/dlls/ntdll/unix/unix_private.h
@@ -227,6 +227,7 @@ extern unsigned int server_select( const union select_op *select_op, data_size_t
                                    timeout_t abs_timeout, struct context_data *context, struct user_apc *user_apc );
 extern unsigned int server_wait( const union select_op *select_op, data_size_t size, UINT flags,
                                  const LARGE_INTEGER *timeout );
+extern unsigned int server_wait_for_object( HANDLE handle, BOOL alertable, const LARGE_INTEGER *timeout );
 extern unsigned int server_queue_process_apc( HANDLE process, const union apc_call *call,
                                               union apc_result *result );
 extern int server_get_unix_fd( HANDLE handle, unsigned int wanted_access, int *unix_fd,
@@ -467,7 +468,7 @@ static inline struct async_data server_async( HANDLE handle, struct async_fileio
 
 static inline NTSTATUS wait_async( HANDLE handle, BOOL alertable )
 {
-    return NtWaitForSingleObject( handle, alertable, NULL );
+    return server_wait_for_object( handle, alertable, NULL );
 }
 
 static inline BOOL in_wow64_call(void)
-- 
2.51.0


From be62b0676b5ba2f1e81c6490cf39e608dca6f4e5 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Thu, 26 Jun 2025 22:05:04 +0200
Subject: [PATCH 02/16] win32u: Move server queue handle to ntuser_thread_info.

Signed-off-by: Vasiliy Stelmachenok <ventureo@cachyos.org>
---
 dlls/win32u/message.c   | 6 +++---
 dlls/win32u/sysparams.c | 4 +++-
 include/ntuser.h        | 1 +
 3 files changed, 7 insertions(+), 4 deletions(-)

diff --git a/dlls/win32u/message.c b/dlls/win32u/message.c
index d3ef83785bb..965998f1610 100644
--- a/dlls/win32u/message.c
+++ b/dlls/win32u/message.c
@@ -3137,10 +3137,10 @@ static void process_sent_messages(void)
  */
 static HANDLE get_server_queue_handle(void)
 {
-    struct user_thread_info *thread_info = get_user_thread_info();
+    struct ntuser_thread_info *thread_info = NtUserGetThreadInfo();
     HANDLE ret;
 
-    if (!(ret = thread_info->server_queue))
+    if (!(ret = UlongToHandle( thread_info->server_queue )))
     {
         SERVER_START_REQ( get_msg_queue_handle )
         {
@@ -3148,7 +3148,7 @@ static HANDLE get_server_queue_handle(void)
             ret = wine_server_ptr_handle( reply->handle );
         }
         SERVER_END_REQ;
-        thread_info->server_queue = ret;
+        thread_info->server_queue = HandleToUlong( ret );
         if (!ret) ERR( "Cannot get server thread queue\n" );
     }
     return ret;
diff --git a/dlls/win32u/sysparams.c b/dlls/win32u/sysparams.c
index 3a0fbe4f87b..7d1bbede15b 100644
--- a/dlls/win32u/sysparams.c
+++ b/dlls/win32u/sysparams.c
@@ -7047,6 +7047,7 @@ BOOL is_exiting_thread( DWORD tid )
 static void thread_detach(void)
 {
     struct user_thread_info *thread_info = get_user_thread_info();
+    HANDLE server_queue = UlongToHandle( thread_info->client_info.server_queue );
 
     destroy_thread_windows();
     user_driver->pThreadDetach();
@@ -7054,7 +7055,8 @@ static void thread_detach(void)
     free( thread_info->rawinput );
 
     cleanup_imm_thread();
-    NtClose( thread_info->server_queue );
+    if (server_queue) NtClose( server_queue );
+    thread_info->client_info.server_queue = 0;
     free( thread_info->session_data );
 
     exiting_thread_id = 0;
diff --git a/include/ntuser.h b/include/ntuser.h
index ef09d7e97bb..1de2569bade 100644
--- a/include/ntuser.h
+++ b/include/ntuser.h
@@ -134,6 +134,7 @@ struct ntuser_thread_info
     UINT           default_imc;       /* default input context */
     UINT64         client_imm;        /* client IMM thread info */
     UINT64         wmchar_data;       /* client data for WM_CHAR mappings */
+    UINT           server_queue;      /* handle of the server-side queue */
 };
 
 static inline struct ntuser_thread_info *NtUserGetThreadInfo(void)
-- 
2.51.0


From b9b9f4e0100688e45a460c082ebb9dd5e8541b97 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Thu, 4 Sep 2025 23:22:43 +0200
Subject: [PATCH 03/16] server: Create an inproc sync for message queue
 signaling.

Signed-off-by: Vasiliy Stelmachenok <ventureo@cachyos.org>
---
 dlls/ntdll/unix/server.c       |  5 +++++
 dlls/ntdll/unix/thread.c       | 20 ++++++++++++++++++--
 dlls/ntdll/unix/unix_private.h |  1 +
 dlls/ntdll/unix/virtual.c      |  9 +++++----
 server/inproc_sync.c           | 19 ++++++++-----------
 server/object.h                |  1 +
 server/protocol.def            |  2 ++
 server/queue.c                 |  2 +-
 server/thread.c                | 22 +++++++++++++++++++++-
 server/thread.h                |  1 +
 10 files changed, 63 insertions(+), 19 deletions(-)

diff --git a/dlls/ntdll/unix/server.c b/dlls/ntdll/unix/server.c
index bbca17aee8f..2430fb75410 100644
--- a/dlls/ntdll/unix/server.c
+++ b/dlls/ntdll/unix/server.c
@@ -1677,6 +1677,11 @@ size_t server_init_process(void)
                 inproc_device_fd = wine_server_receive_fd( &handle );
                 assert( handle == reply->inproc_device );
             }
+            if (reply->queue_handle)
+            {
+                data->queue_sync_fd = wine_server_receive_fd( &handle );
+                assert( handle == reply->queue_handle );
+            }
         }
     }
     SERVER_END_REQ;
diff --git a/dlls/ntdll/unix/thread.c b/dlls/ntdll/unix/thread.c
index 65e7fbcb6bf..f08469835d0 100644
--- a/dlls/ntdll/unix/thread.c
+++ b/dlls/ntdll/unix/thread.c
@@ -1104,6 +1104,7 @@ static void contexts_from_server( CONTEXT *context, struct context_data server_c
  */
 static DECLSPEC_NORETURN void pthread_exit_wrapper( int status )
 {
+    close( ntdll_get_thread_data()->queue_sync_fd );
     close( ntdll_get_thread_data()->wait_fd[0] );
     close( ntdll_get_thread_data()->wait_fd[1] );
     close( ntdll_get_thread_data()->reply_fd );
@@ -1324,7 +1325,7 @@ NTSTATUS WINAPI NtCreateThreadEx( HANDLE *handle, ACCESS_MASK access, OBJECT_ATT
     struct object_attributes *objattr;
     struct ntdll_thread_data *thread_data;
     DWORD tid = 0;
-    int request_pipe[2];
+    int request_pipe[2], queue_sync_fd = -1;
     TEB *teb;
     WOW_TEB *wow_teb;
     unsigned int status;
@@ -1377,6 +1378,11 @@ NTSTATUS WINAPI NtCreateThreadEx( HANDLE *handle, ACCESS_MASK access, OBJECT_ATT
 
     if (!access) access = THREAD_ALL_ACCESS;
 
+    /* We need to use fd_cache_mutex here to protect against races with
+     * other threads trying to receive fds for the fd cache,
+     * and we need to use an uninterrupted section to prevent reentrancy. */
+    server_enter_uninterrupted_section( &fd_cache_mutex, &sigset );
+
     SERVER_START_REQ( new_thread )
     {
         req->process    = wine_server_obj_handle( process );
@@ -1386,6 +1392,12 @@ NTSTATUS WINAPI NtCreateThreadEx( HANDLE *handle, ACCESS_MASK access, OBJECT_ATT
         wine_server_add_data( req, objattr, len );
         if (!(status = wine_server_call( req )))
         {
+            obj_handle_t token;
+            if (reply->queue_handle)
+            {
+                queue_sync_fd = wine_server_receive_fd( &token );
+                assert( token == reply->queue_handle );
+            }
             *handle = wine_server_ptr_handle( reply->handle );
             tid = reply->tid;
         }
@@ -1393,6 +1405,8 @@ NTSTATUS WINAPI NtCreateThreadEx( HANDLE *handle, ACCESS_MASK access, OBJECT_ATT
     }
     SERVER_END_REQ;
 
+    server_leave_uninterrupted_section( &fd_cache_mutex, &sigset );
+
     free( objattr );
     if (status)
     {
@@ -1417,7 +1431,8 @@ NTSTATUS WINAPI NtCreateThreadEx( HANDLE *handle, ACCESS_MASK access, OBJECT_ATT
     if (wow_teb) wow_teb->SkipThreadAttach = teb->SkipThreadAttach;
 
     thread_data = (struct ntdll_thread_data *)&teb->GdiTebBatch;
-    thread_data->request_fd  = request_pipe[1];
+    thread_data->request_fd     = request_pipe[1];
+    thread_data->queue_sync_fd  = queue_sync_fd;
     thread_data->start = start;
     thread_data->param = param;
 
@@ -1439,6 +1454,7 @@ done:
     if (status)
     {
         NtClose( *handle );
+        if (queue_sync_fd != -1) close( queue_sync_fd );
         close( request_pipe[1] );
         return status;
     }
diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
index 75c04e5ec15..200d73b9911 100644
--- a/dlls/ntdll/unix/unix_private.h
+++ b/dlls/ntdll/unix/unix_private.h
@@ -108,6 +108,7 @@ struct ntdll_thread_data
     int                       request_fd;    /* fd for sending server requests */
     int                       reply_fd;      /* fd for receiving server replies */
     int                       wait_fd[2];    /* fd for sleeping server requests */
+    int                       queue_sync_fd; /* inproc sync fd for message queue */
     BOOL                      allow_writes;  /* ThreadAllowWrites flags */
     pthread_t                 pthread_id;    /* pthread thread id */
     void                     *kernel_stack;  /* stack for thread startup and kernel syscalls */
diff --git a/dlls/ntdll/unix/virtual.c b/dlls/ntdll/unix/virtual.c
index 994f76fb72a..8b8d4220046 100644
--- a/dlls/ntdll/unix/virtual.c
+++ b/dlls/ntdll/unix/virtual.c
@@ -4022,10 +4022,11 @@ static TEB *init_teb( void *ptr, BOOL is_wow )
     teb->StaticUnicodeString.Buffer = teb->StaticUnicodeBuffer;
     teb->StaticUnicodeString.MaximumLength = sizeof(teb->StaticUnicodeBuffer);
     thread_data = (struct ntdll_thread_data *)&teb->GdiTebBatch;
-    thread_data->request_fd = -1;
-    thread_data->reply_fd   = -1;
-    thread_data->wait_fd[0] = -1;
-    thread_data->wait_fd[1] = -1;
+    thread_data->request_fd     = -1;
+    thread_data->reply_fd       = -1;
+    thread_data->wait_fd[0]     = -1;
+    thread_data->wait_fd[1]     = -1;
+    thread_data->queue_sync_fd  = -1;
     list_add_head( &teb_list, &thread_data->entry );
     return teb;
 }
diff --git a/server/inproc_sync.c b/server/inproc_sync.c
index 41a9c2770a7..ccaf492321d 100644
--- a/server/inproc_sync.c
+++ b/server/inproc_sync.c
@@ -133,21 +133,18 @@ static void inproc_sync_destroy( struct object *obj )
     close( sync->fd );
 }
 
-static int get_inproc_sync_fd( struct object *obj, int *type )
+int get_inproc_sync_fd( struct object *obj, int *type )
 {
+    struct inproc_sync *inproc;
     struct object *sync;
     int fd = -1;
 
-    if (obj != (struct object *)current->queue) sync = get_obj_sync( obj );
-    else sync = thread_queue_inproc_sync( current );
-    if (!sync) return -1;
+    if (!(sync = get_obj_sync( obj ))) return -1;
+    assert( sync->ops == &inproc_sync_ops );
 
-    if (sync->ops == &inproc_sync_ops)
-    {
-        struct inproc_sync *inproc = (struct inproc_sync *)sync;
-        *type = inproc->type;
-        fd = inproc->fd;
-    }
+    inproc = (struct inproc_sync *)sync;
+    *type = inproc->type;
+    fd = inproc->fd;
 
     release_object( sync );
     return fd;
@@ -173,7 +170,7 @@ void reset_inproc_sync( struct inproc_sync *sync )
 {
 }
 
-static int get_inproc_sync_fd( struct object *obj, int *type )
+int get_inproc_sync_fd( struct object *obj, int *type )
 {
     return -1;
 }
diff --git a/server/object.h b/server/object.h
index 203734a565f..46e4ac7e78d 100644
--- a/server/object.h
+++ b/server/object.h
@@ -247,6 +247,7 @@ extern int get_inproc_device_fd(void);
 extern struct inproc_sync *create_inproc_internal_sync( int manual, int signaled );
 extern void signal_inproc_sync( struct inproc_sync *sync );
 extern void reset_inproc_sync( struct inproc_sync *sync );
+extern int get_inproc_sync_fd( struct object *obj, int *type );
 
 /* serial functions */
 
diff --git a/server/protocol.def b/server/protocol.def
index 4c9ba8243cb..cd06162557d 100644
--- a/server/protocol.def
+++ b/server/protocol.def
@@ -1114,6 +1114,7 @@ typedef volatile struct
 @REPLY
     thread_id_t  tid;          /* thread id */
     obj_handle_t handle;       /* thread handle (in the current process) */
+    obj_handle_t queue_handle; /* inproc queue fd in flight with this handle */
 @END
 
 
@@ -1149,6 +1150,7 @@ typedef volatile struct
     timeout_t    server_start; /* server start time */
     unsigned int session_id;   /* process session id */
     obj_handle_t inproc_device;/* inproc device fd in flight with this handle */
+    obj_handle_t queue_handle; /* inproc queue fd in flight with this handle */
     data_size_t  info_size;    /* total size of startup info */
     VARARG(machines,ushorts);  /* array of supported machines */
 @END
diff --git a/server/queue.c b/server/queue.c
index 3f06c15d006..109048b1e86 100644
--- a/server/queue.c
+++ b/server/queue.c
@@ -326,7 +326,7 @@ static struct msg_queue *create_msg_queue( struct thread *thread, struct thread_
         list_init( &queue->expired_timers );
         for (i = 0; i < NB_MSG_KINDS; i++) list_init( &queue->msg_list[i] );
 
-        if (get_inproc_device_fd() >= 0 && !(queue->inproc_sync = create_inproc_internal_sync( 1, 0 ))) goto error;
+        if (thread->queue_sync) queue->inproc_sync = (struct inproc_sync *)grab_object( thread->queue_sync );
         if (!(queue->shared = alloc_shared_object())) goto error;
 
         SHARED_WRITE_BEGIN( queue->shared, queue_shm_t )
diff --git a/server/thread.c b/server/thread.c
index fba1f69d284..ae38abf237f 100644
--- a/server/thread.c
+++ b/server/thread.c
@@ -397,6 +397,7 @@ static inline void init_thread_structure( struct thread *thread )
     int i;
 
     thread->sync            = NULL;
+    thread->queue_sync      = NULL;
     thread->unix_pid        = -1;  /* not known yet */
     thread->unix_tid        = -1;  /* not known yet */
     thread->context         = NULL;
@@ -560,6 +561,10 @@ struct thread *create_thread( int fd, struct process *process, const struct secu
     }
     if (!(thread->request_fd = create_anonymous_fd( &thread_fd_ops, fd, &thread->obj, 0 ))) goto error;
     if (!(thread->sync = create_event_sync( 1, 0 ))) goto error;
+    if (get_inproc_device_fd() >= 0)
+    {
+        if (!(thread->queue_sync = create_inproc_internal_sync( 1, 0 ))) goto error;
+    }
 
     if (process->desktop)
     {
@@ -654,6 +659,7 @@ static void destroy_thread( struct object *obj )
     release_object( thread->process );
     if (thread->id) free_ptid( thread->id );
     if (thread->token) release_object( thread->token );
+    if (thread->queue_sync) release_object( thread->queue_sync );
     if (thread->sync) release_object( thread->sync );
 }
 
@@ -1621,6 +1627,7 @@ DECL_HANDLER(new_thread)
     const struct security_descriptor *sd;
     const struct object_attributes *objattr = get_req_object_attributes( &sd, &name, NULL );
     int request_fd = thread_get_inflight_fd( current, req->request_fd );
+    int fd, type;
 
     if (!(process = get_process_from_handle( req->process, 0 )))
     {
@@ -1665,6 +1672,14 @@ DECL_HANDLER(new_thread)
         if ((reply->handle = alloc_handle_no_access_check( current->process, thread,
                                                            req->access, objattr->attributes )))
         {
+            if (request_fd != -1) /* first thread fds will be sent in init_first_thread */
+            {
+                if (thread->queue_sync && (fd = get_inproc_sync_fd( (struct object *)thread->queue_sync, &type )) >= 0)
+                {
+                    reply->queue_handle = get_thread_id( thread ) | 1;
+                    send_client_fd( thread->process, fd, reply->queue_handle );
+                }
+            }
             /* thread object will be released when the thread gets killed */
             goto done;
         }
@@ -1709,7 +1724,7 @@ static int init_thread( struct thread *thread, int reply_fd, int wait_fd )
 DECL_HANDLER(init_first_thread)
 {
     struct process *process = current->process;
-    int fd;
+    int fd, type;
 
     if (!init_thread( current, req->reply_fd, req->wait_fd )) return;
 
@@ -1738,6 +1753,11 @@ DECL_HANDLER(init_first_thread)
         reply->inproc_device = get_process_id( process ) | 1;
         send_client_fd( process, fd, reply->inproc_device );
     }
+    if (current->queue_sync && (fd = get_inproc_sync_fd( (struct object *)current->queue_sync, &type )) >= 0)
+    {
+        reply->queue_handle = get_thread_id( current ) | 1;
+        send_client_fd( process, fd, reply->queue_handle );
+    }
 }
 
 /* initialize a new thread */
diff --git a/server/thread.h b/server/thread.h
index 1418e4c5039..ea4c4dad4da 100644
--- a/server/thread.h
+++ b/server/thread.h
@@ -51,6 +51,7 @@ struct thread
 {
     struct object          obj;           /* object header */
     struct event_sync     *sync;          /* sync object for wait/signal */
+    struct inproc_sync    *queue_sync;    /* inproc sync for message queue */
     struct list            entry;         /* entry in system-wide thread list */
     struct list            proc_entry;    /* entry in per-process thread list */
     struct list            desktop_entry; /* entry in per-desktop thread list */
-- 
2.51.0


From b301d6e59540e670b2ff3ad45c21d94dccde32f6 Mon Sep 17 00:00:00 2001
From: Elizabeth Figura <zfigura@codeweavers.com>
Date: Tue, 9 Sep 2025 17:12:34 +0200
Subject: [PATCH 04/16] ntdll: Add a reference count to inproc_sync objects.

Signed-off-by: Vasiliy Stelmachenok <ventureo@cachyos.org>
---
 dlls/ntdll/unix/sync.c | 6 +++++-
 1 file changed, 5 insertions(+), 1 deletion(-)

diff --git a/dlls/ntdll/unix/sync.c b/dlls/ntdll/unix/sync.c
index dd18c948d22..8c04628fbc6 100644
--- a/dlls/ntdll/unix/sync.c
+++ b/dlls/ntdll/unix/sync.c
@@ -309,6 +309,7 @@ static unsigned int validate_open_object_attributes( const OBJECT_ATTRIBUTES *at
 
 struct inproc_sync
 {
+    LONG           refcount;  /* reference count of the sync object */
     int            fd;        /* unix file descriptor */
     unsigned int   access;    /* handle access rights */
     unsigned int   type;      /* enum inproc_sync_type */
@@ -316,7 +317,9 @@ struct inproc_sync
 
 static void release_inproc_sync( struct inproc_sync *sync )
 {
-    close( sync->fd );
+    LONG ref = InterlockedDecrement( &sync->refcount );
+    assert( ref >= 0 );
+    if (!ref) close( sync->fd );
 }
 
 static NTSTATUS get_inproc_sync( HANDLE handle, ACCESS_MASK desired_access, struct inproc_sync *sync )
@@ -335,6 +338,7 @@ static NTSTATUS get_inproc_sync( HANDLE handle, ACCESS_MASK desired_access, stru
         if (!(ret = wine_server_call( req )))
         {
             obj_handle_t fd_handle;
+            sync->refcount = 1;
             sync->fd = wine_server_receive_fd( &fd_handle );
             assert( wine_server_ptr_handle(fd_handle) == handle );
             sync->access = reply->access;
-- 
2.51.0


From 618f09d2f88b8086779890acb29e6b885e2bf136 Mon Sep 17 00:00:00 2001
From: Elizabeth Figura <zfigura@codeweavers.com>
Date: Tue, 2 Sep 2025 21:02:00 +0200
Subject: [PATCH 05/16] ntdll: Notify wineserver when waiting on inproc queue.

Signed-off-by: Vasiliy Stelmachenok <ventureo@cachyos.org>
---
 dlls/ntdll/unix/sync.c | 48 ++++++++++++++++++++++++++++++++++++++----
 server/inproc_sync.c   | 21 ++++++++++++------
 server/protocol.def    |  7 ++++++
 server/queue.c         | 10 +++++++++
 server/user.h          |  2 ++
 5 files changed, 77 insertions(+), 11 deletions(-)

diff --git a/dlls/ntdll/unix/sync.c b/dlls/ntdll/unix/sync.c
index 8c04628fbc6..e72067056b4 100644
--- a/dlls/ntdll/unix/sync.c
+++ b/dlls/ntdll/unix/sync.c
@@ -359,6 +359,13 @@ static NTSTATUS get_inproc_sync( HANDLE handle, ACCESS_MASK desired_access, stru
     return STATUS_SUCCESS;
 }
 
+static NTSTATUS get_inproc_queue_sync( struct inproc_sync *sync )
+{
+    sync->refcount = 2; /* prevent closing */
+    sync->fd = ntdll_get_thread_data()->queue_sync_fd;
+    return STATUS_SUCCESS;
+}
+
 extern NTSTATUS check_signal_access( struct inproc_sync *sync )
 {
     switch (sync->type)
@@ -371,6 +378,26 @@ extern NTSTATUS check_signal_access( struct inproc_sync *sync )
     return STATUS_OBJECT_TYPE_MISMATCH;
 }
 
+static void select_queue(void)
+{
+    SERVER_START_REQ( select_inproc_queue )
+    {
+        req->select = 1;
+        wine_server_call( req );
+    }
+    SERVER_END_REQ;
+}
+
+static void unselect_queue( BOOL signaled )
+{
+    SERVER_START_REQ( select_inproc_queue )
+    {
+        req->signaled = signaled;
+        wine_server_call( req );
+    }
+    SERVER_END_REQ;
+}
+
 static NTSTATUS inproc_release_semaphore( HANDLE handle, ULONG count, ULONG *prev_count )
 {
     if (inproc_device_fd < 0) return STATUS_NOT_IMPLEMENTED;
@@ -422,7 +449,9 @@ static NTSTATUS inproc_query_mutex( HANDLE handle, MUTANT_BASIC_INFORMATION *inf
 static NTSTATUS inproc_wait( DWORD count, const HANDLE *handles, BOOLEAN wait_any,
                              BOOLEAN alertable, const LARGE_INTEGER *timeout )
 {
+    HANDLE server_queue = UlongToHandle( NtUserGetThreadInfo()->server_queue );
     struct inproc_sync *syncs[64], stack[ARRAY_SIZE(syncs)];
+    UINT queue = -1;
     NTSTATUS ret;
 
     if (inproc_device_fd < 0) return STATUS_NOT_IMPLEMENTED;
@@ -430,7 +459,8 @@ static NTSTATUS inproc_wait( DWORD count, const HANDLE *handles, BOOLEAN wait_an
     assert( count <= ARRAY_SIZE(syncs) );
     for (int i = 0; i < count; ++i)
     {
-        if ((ret = get_inproc_sync( handles[i], SYNCHRONIZE, stack + i )))
+        if (server_queue && handles[i] == server_queue && !get_inproc_queue_sync( stack + i )) queue = i;
+        else if ((ret = get_inproc_sync( handles[i], SYNCHRONIZE, stack + i )))
         {
             while (i--) release_inproc_sync( syncs[i] );
             return ret;
@@ -438,13 +468,18 @@ static NTSTATUS inproc_wait( DWORD count, const HANDLE *handles, BOOLEAN wait_an
         syncs[i] = stack + i;
     }
 
+    if (queue != -1) select_queue();
+    ret = STATUS_NOT_IMPLEMENTED;
+    if (queue != -1) unselect_queue( ret == queue );
+
     while (count--) release_inproc_sync( syncs[count] );
-    return STATUS_NOT_IMPLEMENTED;
+    return ret;
 }
 
 static NTSTATUS inproc_signal_and_wait( HANDLE signal, HANDLE wait,
                                         BOOLEAN alertable, const LARGE_INTEGER *timeout )
 {
+    HANDLE server_queue = UlongToHandle( NtUserGetThreadInfo()->server_queue );
     struct inproc_sync stack_signal, stack_wait, *signal_sync = &stack_signal, *wait_sync = &stack_wait;
     NTSTATUS ret;
 
@@ -457,15 +492,20 @@ static NTSTATUS inproc_signal_and_wait( HANDLE signal, HANDLE wait,
         return ret;
     }
 
-    if ((ret = get_inproc_sync( wait, SYNCHRONIZE, wait_sync )))
+    if (server_queue && wait == server_queue) get_inproc_queue_sync( wait_sync );
+    else if ((ret = get_inproc_sync( wait, SYNCHRONIZE, wait_sync )))
     {
         release_inproc_sync( signal_sync );
         return ret;
     }
 
+    if (server_queue && wait == server_queue) select_queue();
+    ret = STATUS_NOT_IMPLEMENTED;
+    if (server_queue && wait == server_queue) unselect_queue( !ret );
+
     release_inproc_sync( signal_sync );
     release_inproc_sync( wait_sync );
-    return STATUS_NOT_IMPLEMENTED;
+    return ret;
 }
 
 
diff --git a/server/inproc_sync.c b/server/inproc_sync.c
index ccaf492321d..9fa819bdb14 100644
--- a/server/inproc_sync.c
+++ b/server/inproc_sync.c
@@ -135,18 +135,18 @@ static void inproc_sync_destroy( struct object *obj )
 
 int get_inproc_sync_fd( struct object *obj, int *type )
 {
-    struct inproc_sync *inproc;
     struct object *sync;
     int fd = -1;
 
     if (!(sync = get_obj_sync( obj ))) return -1;
-    assert( sync->ops == &inproc_sync_ops );
-
-    inproc = (struct inproc_sync *)sync;
-    *type = inproc->type;
-    fd = inproc->fd;
-
+    if (sync->ops == &inproc_sync_ops)
+    {
+        struct inproc_sync *inproc = (struct inproc_sync *)sync;
+        *type = inproc->type;
+        fd = inproc->fd;
+    }
     release_object( sync );
+
     return fd;
 }
 
@@ -191,3 +191,10 @@ DECL_HANDLER(get_inproc_sync_fd)
 
     release_object( obj );
 }
+
+DECL_HANDLER(select_inproc_queue)
+{
+    if (!thread_queue_select( current, req->select )) return;
+    if (req->select) check_thread_queue_idle( current );
+    if (req->signaled) thread_queue_satisfied( current );
+}
diff --git a/server/protocol.def b/server/protocol.def
index cd06162557d..66903b400aa 100644
--- a/server/protocol.def
+++ b/server/protocol.def
@@ -4159,3 +4159,10 @@ enum inproc_sync_type
     d3dkmt_handle_t     global;         /* global d3dkmt handle */
     obj_handle_t        handle;         /* internal handle of the server object */
 @END
+
+
+/* Begin/end a client-side wait on a message queue */
+@REQ(select_inproc_queue)
+    int          select;          /* 1: begin waiting, 0: end waiting */
+    int          signaled;        /* was the queue signaled? */
+@END
diff --git a/server/queue.c b/server/queue.c
index 109048b1e86..45c84192d96 100644
--- a/server/queue.c
+++ b/server/queue.c
@@ -1350,6 +1350,16 @@ static void msg_queue_satisfied( struct object *obj, struct wait_queue_entry *en
     reset_queue_sync( queue );
 }
 
+int thread_queue_select( struct thread *thread, int select )
+{
+    return msg_queue_select( thread->queue, select );
+}
+
+void thread_queue_satisfied( struct thread *thread )
+{
+    msg_queue_satisfied( &thread->queue->obj, NULL );
+}
+
 static void msg_queue_destroy( struct object *obj )
 {
     struct msg_queue *queue = (struct msg_queue *)obj;
diff --git a/server/user.h b/server/user.h
index 35bd396f859..7fab631173a 100644
--- a/server/user.h
+++ b/server/user.h
@@ -119,6 +119,8 @@ extern void add_queue_hook_count( struct thread *thread, unsigned int index, int
 extern void inc_queue_paint_count( struct thread *thread, int incr );
 extern void queue_cleanup_window( struct thread *thread, user_handle_t win );
 extern int init_thread_queue( struct thread *thread );
+extern int thread_queue_select( struct thread *thread, int select );
+extern void thread_queue_satisfied( struct thread *thread );
 extern void check_thread_queue_idle( struct thread *thread );
 extern struct object *thread_queue_inproc_sync( struct thread *thread );
 extern int attach_thread_input( struct thread *thread_from, struct thread *thread_to );
-- 
2.51.0


From 895b904f4a897e0d992e6ae92760102423ae6a17 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Thu, 4 Sep 2025 14:51:29 +0200
Subject: [PATCH 06/16] server: Create an inproc sync for user APC signaling.

Signed-off-by: Vasiliy Stelmachenok <ventureo@cachyos.org>
---
 dlls/ntdll/unix/server.c       |  5 +++++
 dlls/ntdll/unix/thread.c       | 10 +++++++++-
 dlls/ntdll/unix/unix_private.h |  1 +
 dlls/ntdll/unix/virtual.c      |  1 +
 server/protocol.def            |  2 ++
 server/thread.c                | 21 +++++++++++++++++++++
 server/thread.h                |  1 +
 7 files changed, 40 insertions(+), 1 deletion(-)

diff --git a/dlls/ntdll/unix/server.c b/dlls/ntdll/unix/server.c
index 2430fb75410..f131b919e00 100644
--- a/dlls/ntdll/unix/server.c
+++ b/dlls/ntdll/unix/server.c
@@ -1682,6 +1682,11 @@ size_t server_init_process(void)
                 data->queue_sync_fd = wine_server_receive_fd( &handle );
                 assert( handle == reply->queue_handle );
             }
+            if (reply->alert_handle)
+            {
+                data->alert_sync_fd = wine_server_receive_fd( &handle );
+                assert( handle == reply->alert_handle );
+            }
         }
     }
     SERVER_END_REQ;
diff --git a/dlls/ntdll/unix/thread.c b/dlls/ntdll/unix/thread.c
index f08469835d0..199c88600d1 100644
--- a/dlls/ntdll/unix/thread.c
+++ b/dlls/ntdll/unix/thread.c
@@ -1105,6 +1105,7 @@ static void contexts_from_server( CONTEXT *context, struct context_data server_c
 static DECLSPEC_NORETURN void pthread_exit_wrapper( int status )
 {
     close( ntdll_get_thread_data()->queue_sync_fd );
+    close( ntdll_get_thread_data()->alert_sync_fd );
     close( ntdll_get_thread_data()->wait_fd[0] );
     close( ntdll_get_thread_data()->wait_fd[1] );
     close( ntdll_get_thread_data()->reply_fd );
@@ -1325,7 +1326,7 @@ NTSTATUS WINAPI NtCreateThreadEx( HANDLE *handle, ACCESS_MASK access, OBJECT_ATT
     struct object_attributes *objattr;
     struct ntdll_thread_data *thread_data;
     DWORD tid = 0;
-    int request_pipe[2], queue_sync_fd = -1;
+    int request_pipe[2], queue_sync_fd = -1, alert_sync_fd = -1;
     TEB *teb;
     WOW_TEB *wow_teb;
     unsigned int status;
@@ -1398,6 +1399,11 @@ NTSTATUS WINAPI NtCreateThreadEx( HANDLE *handle, ACCESS_MASK access, OBJECT_ATT
                 queue_sync_fd = wine_server_receive_fd( &token );
                 assert( token == reply->queue_handle );
             }
+            if (reply->alert_handle)
+            {
+                alert_sync_fd = wine_server_receive_fd( &token );
+                assert( token == reply->alert_handle );
+            }
             *handle = wine_server_ptr_handle( reply->handle );
             tid = reply->tid;
         }
@@ -1433,6 +1439,7 @@ NTSTATUS WINAPI NtCreateThreadEx( HANDLE *handle, ACCESS_MASK access, OBJECT_ATT
     thread_data = (struct ntdll_thread_data *)&teb->GdiTebBatch;
     thread_data->request_fd     = request_pipe[1];
     thread_data->queue_sync_fd  = queue_sync_fd;
+    thread_data->alert_sync_fd  = alert_sync_fd;
     thread_data->start = start;
     thread_data->param = param;
 
@@ -1455,6 +1462,7 @@ done:
     {
         NtClose( *handle );
         if (queue_sync_fd != -1) close( queue_sync_fd );
+        if (alert_sync_fd != -1) close( alert_sync_fd );
         close( request_pipe[1] );
         return status;
     }
diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
index 200d73b9911..b324b2297d7 100644
--- a/dlls/ntdll/unix/unix_private.h
+++ b/dlls/ntdll/unix/unix_private.h
@@ -108,6 +108,7 @@ struct ntdll_thread_data
     int                       request_fd;    /* fd for sending server requests */
     int                       reply_fd;      /* fd for receiving server replies */
     int                       wait_fd[2];    /* fd for sleeping server requests */
+    int                       alert_sync_fd; /* inproc sync fd for user apc alerts */
     int                       queue_sync_fd; /* inproc sync fd for message queue */
     BOOL                      allow_writes;  /* ThreadAllowWrites flags */
     pthread_t                 pthread_id;    /* pthread thread id */
diff --git a/dlls/ntdll/unix/virtual.c b/dlls/ntdll/unix/virtual.c
index 8b8d4220046..99ae256e872 100644
--- a/dlls/ntdll/unix/virtual.c
+++ b/dlls/ntdll/unix/virtual.c
@@ -4026,6 +4026,7 @@ static TEB *init_teb( void *ptr, BOOL is_wow )
     thread_data->reply_fd       = -1;
     thread_data->wait_fd[0]     = -1;
     thread_data->wait_fd[1]     = -1;
+    thread_data->alert_sync_fd  = -1;
     thread_data->queue_sync_fd  = -1;
     list_add_head( &teb_list, &thread_data->entry );
     return teb;
diff --git a/server/protocol.def b/server/protocol.def
index 66903b400aa..e77fd72e890 100644
--- a/server/protocol.def
+++ b/server/protocol.def
@@ -1115,6 +1115,7 @@ typedef volatile struct
     thread_id_t  tid;          /* thread id */
     obj_handle_t handle;       /* thread handle (in the current process) */
     obj_handle_t queue_handle; /* inproc queue fd in flight with this handle */
+    obj_handle_t alert_handle; /* alert fd is in flight with this handle */
 @END
 
 
@@ -1150,6 +1151,7 @@ typedef volatile struct
     timeout_t    server_start; /* server start time */
     unsigned int session_id;   /* process session id */
     obj_handle_t inproc_device;/* inproc device fd in flight with this handle */
+    obj_handle_t alert_handle; /* alert fd is in flight with this handle */
     obj_handle_t queue_handle; /* inproc queue fd in flight with this handle */
     data_size_t  info_size;    /* total size of startup info */
     VARARG(machines,ushorts);  /* array of supported machines */
diff --git a/server/thread.c b/server/thread.c
index ae38abf237f..8588d49b845 100644
--- a/server/thread.c
+++ b/server/thread.c
@@ -397,6 +397,7 @@ static inline void init_thread_structure( struct thread *thread )
     int i;
 
     thread->sync            = NULL;
+    thread->alert_sync      = NULL;
     thread->queue_sync      = NULL;
     thread->unix_pid        = -1;  /* not known yet */
     thread->unix_tid        = -1;  /* not known yet */
@@ -563,6 +564,7 @@ struct thread *create_thread( int fd, struct process *process, const struct secu
     if (!(thread->sync = create_event_sync( 1, 0 ))) goto error;
     if (get_inproc_device_fd() >= 0)
     {
+        if (!(thread->alert_sync = create_inproc_internal_sync( 1, 0 ))) goto error;
         if (!(thread->queue_sync = create_inproc_internal_sync( 1, 0 ))) goto error;
     }
 
@@ -659,6 +661,7 @@ static void destroy_thread( struct object *obj )
     release_object( thread->process );
     if (thread->id) free_ptid( thread->id );
     if (thread->token) release_object( thread->token );
+    if (thread->alert_sync) release_object( thread->alert_sync );
     if (thread->queue_sync) release_object( thread->queue_sync );
     if (thread->sync) release_object( thread->sync );
 }
@@ -1446,7 +1449,11 @@ static int queue_apc( struct process *process, struct thread *thread, struct thr
     grab_object( apc );
     list_add_tail( queue, &apc->entry );
     if (!list_prev( queue, &apc->entry ))  /* first one */
+    {
+        if (apc->call.type == APC_USER && thread->alert_sync)
+            signal_inproc_sync( thread->alert_sync );
         wake_thread( thread );
+    }
 
     return 1;
 }
@@ -1478,6 +1485,8 @@ void thread_cancel_apc( struct thread *thread, struct object *owner, enum apc_ty
         apc->executed = 1;
         signal_sync( apc->sync );
         release_object( apc );
+        if (list_empty( &thread->user_apc ) && thread->alert_sync)
+            reset_inproc_sync( thread->alert_sync );
         return;
     }
 }
@@ -1492,6 +1501,8 @@ static struct thread_apc *thread_dequeue_apc( struct thread *thread, int system
     {
         apc = LIST_ENTRY( ptr, struct thread_apc, entry );
         list_remove( ptr );
+        if (list_empty( &thread->user_apc ) && thread->alert_sync)
+            reset_inproc_sync( thread->alert_sync );
     }
     return apc;
 }
@@ -1679,6 +1690,11 @@ DECL_HANDLER(new_thread)
                     reply->queue_handle = get_thread_id( thread ) | 1;
                     send_client_fd( thread->process, fd, reply->queue_handle );
                 }
+                if (thread->alert_sync && (fd = get_inproc_sync_fd( (struct object *)thread->alert_sync, &type )) >= 0)
+                {
+                    reply->alert_handle = get_thread_id( thread ) | 2;
+                    send_client_fd( thread->process, fd, reply->alert_handle );
+                }
             }
             /* thread object will be released when the thread gets killed */
             goto done;
@@ -1758,6 +1774,11 @@ DECL_HANDLER(init_first_thread)
         reply->queue_handle = get_thread_id( current ) | 1;
         send_client_fd( process, fd, reply->queue_handle );
     }
+    if (current->alert_sync && (fd = get_inproc_sync_fd( (struct object *)current->alert_sync, &type )) >= 0)
+    {
+        reply->alert_handle = get_thread_id( current ) | 2;
+        send_client_fd( process, fd, reply->alert_handle );
+    }
 }
 
 /* initialize a new thread */
diff --git a/server/thread.h b/server/thread.h
index ea4c4dad4da..b10ff82690d 100644
--- a/server/thread.h
+++ b/server/thread.h
@@ -51,6 +51,7 @@ struct thread
 {
     struct object          obj;           /* object header */
     struct event_sync     *sync;          /* sync object for wait/signal */
+    struct inproc_sync    *alert_sync;    /* inproc sync for user apc alerts */
     struct inproc_sync    *queue_sync;    /* inproc sync for message queue */
     struct list            entry;         /* entry in system-wide thread list */
     struct list            proc_entry;    /* entry in per-process thread list */
-- 
2.51.0


From 1cb4abf46645c3e46a90ddc06af55b0a4be523ae Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Wed, 18 Jun 2025 18:59:51 +0200
Subject: [PATCH 07/16] server: Move signal access checks outside of the
 objects.

Signed-off-by: Vasiliy Stelmachenok <ventureo@cachyos.org>
---
 server/async.c       |  4 ++--
 server/atom.c        |  2 +-
 server/change.c      |  2 +-
 server/clipboard.c   |  2 +-
 server/completion.c  |  4 ++--
 server/console.c     | 18 +++++++++---------
 server/debugger.c    |  4 ++--
 server/device.c      |  8 ++++----
 server/directory.c   |  4 ++--
 server/event.c       | 17 ++++++-----------
 server/fd.c          |  8 ++++----
 server/file.c        |  2 +-
 server/handle.c      |  2 +-
 server/hook.c        |  2 +-
 server/inproc_sync.c |  2 +-
 server/mailslot.c    |  8 ++++----
 server/mapping.c     |  6 +++---
 server/mutex.c       | 13 ++++---------
 server/named_pipe.c  | 12 ++++++------
 server/object.c      | 10 ++--------
 server/object.h      |  4 ++--
 server/process.c     |  6 +++---
 server/queue.c       |  4 ++--
 server/registry.c    |  2 +-
 server/request.c     |  2 +-
 server/semaphore.c   | 13 ++++---------
 server/serial.c      |  2 +-
 server/signal.c      |  2 +-
 server/sock.c        |  6 +++---
 server/symlink.c     |  2 +-
 server/thread.c      | 18 ++++++++++++++----
 server/timer.c       |  2 +-
 server/token.c       |  2 +-
 server/window.c      |  2 +-
 server/winstation.c  |  4 ++--
 35 files changed, 95 insertions(+), 106 deletions(-)

diff --git a/server/async.c b/server/async.c
index 4068f744567..4ccdbecd0ec 100644
--- a/server/async.c
+++ b/server/async.c
@@ -79,7 +79,7 @@ static const struct object_ops async_ops =
     remove_queue,              /* remove_queue */
     async_signaled,            /* signaled */
     async_satisfied,           /* satisfied */
-    no_signal,                 /* signal */
+    NULL,                      /* signal */
     no_get_fd,                 /* get_fd */
     default_get_sync,          /* get_sync */
     default_map_access,        /* map_access */
@@ -701,7 +701,7 @@ static const struct object_ops iosb_ops =
     NULL,                     /* remove_queue */
     NULL,                     /* signaled */
     NULL,                     /* satisfied */
-    no_signal,                /* signal */
+    NULL,                     /* signal */
     no_get_fd,                /* get_fd */
     default_get_sync,         /* get_sync */
     default_map_access,       /* map_access */
diff --git a/server/atom.c b/server/atom.c
index 307634124f5..e1693fa1e49 100644
--- a/server/atom.c
+++ b/server/atom.c
@@ -78,7 +78,7 @@ static const struct object_ops atom_table_ops =
     NULL,                         /* remove_queue */
     NULL,                         /* signaled */
     NULL,                         /* satisfied */
-    no_signal,                    /* signal */
+    NULL,                         /* signal */
     no_get_fd,                    /* get_fd */
     default_get_sync,             /* get_sync */
     default_map_access,           /* map_access */
diff --git a/server/change.c b/server/change.c
index 5bcd0676e0d..4e152a39a22 100644
--- a/server/change.c
+++ b/server/change.c
@@ -113,7 +113,7 @@ static const struct object_ops dir_ops =
     NULL,                     /* remove_queue */
     NULL,                     /* signaled */
     NULL,                     /* satisfied */
-    no_signal,                /* signal */
+    NULL,                     /* signal */
     dir_get_fd,               /* get_fd */
     default_fd_get_sync,      /* get_sync */
     default_map_access,       /* map_access */
diff --git a/server/clipboard.c b/server/clipboard.c
index 59a50354b48..a0e7ffa38bd 100644
--- a/server/clipboard.c
+++ b/server/clipboard.c
@@ -77,7 +77,7 @@ static const struct object_ops clipboard_ops =
     NULL,                         /* remove_queue */
     NULL,                         /* signaled */
     NULL,                         /* satisfied */
-    no_signal,                    /* signal */
+    NULL,                         /* signal */
     no_get_fd,                    /* get_fd */
     default_get_sync,             /* get_sync */
     default_map_access,           /* map_access */
diff --git a/server/completion.c b/server/completion.c
index a2028a89823..60f8ad409b2 100644
--- a/server/completion.c
+++ b/server/completion.c
@@ -93,7 +93,7 @@ static const struct object_ops completion_wait_ops =
     remove_queue,                   /* remove_queue */
     completion_wait_signaled,       /* signaled */
     completion_wait_satisfied,      /* satisfied */
-    no_signal,                      /* signal */
+    NULL,                           /* signal */
     no_get_fd,                      /* get_fd */
     default_get_sync,               /* get_sync */
     default_map_access,             /* map_access */
@@ -168,7 +168,7 @@ static const struct object_ops completion_ops =
     NULL,                      /* remove_queue */
     NULL,                      /* signaled */
     NULL,                      /* satisfied */
-    no_signal,                 /* signal */
+    NULL,                      /* signal */
     no_get_fd,                 /* get_fd */
     completion_get_sync,       /* get_sync */
     default_map_access,        /* map_access */
diff --git a/server/console.c b/server/console.c
index f0cb6689d4b..0bb5a6b24c0 100644
--- a/server/console.c
+++ b/server/console.c
@@ -84,7 +84,7 @@ static const struct object_ops console_ops =
     NULL,                             /* remove_queue */
     NULL,                             /* signaled */
     NULL,                             /* satisfied */
-    no_signal,                        /* signal */
+    NULL,                             /* signal */
     console_get_fd,                   /* get_fd */
     console_get_sync,                 /* get_sync */
     default_map_access,               /* map_access */
@@ -163,7 +163,7 @@ static const struct object_ops console_server_ops =
     NULL,                             /* remove_queue */
     NULL,                             /* signaled */
     NULL,                             /* satisfied */
-    no_signal,                        /* signal */
+    NULL,                             /* signal */
     console_server_get_fd,            /* get_fd */
     console_server_get_sync,          /* get_sync */
     default_map_access,               /* map_access */
@@ -234,7 +234,7 @@ static const struct object_ops screen_buffer_ops =
     NULL,                             /* remove_queue */
     NULL,                             /* signaled */
     NULL,                             /* satisfied */
-    no_signal,                        /* signal */
+    NULL,                             /* signal */
     screen_buffer_get_fd,             /* get_fd */
     screen_buffer_get_sync,           /* get_sync */
     default_map_access,               /* map_access */
@@ -280,11 +280,11 @@ static const struct object_ops console_device_ops =
     sizeof(struct object),            /* size */
     &device_type,                     /* type */
     console_device_dump,              /* dump */
-    no_add_queue,                     /* add_queue */
+    NULL,                             /* add_queue */
     NULL,                             /* remove_queue */
     NULL,                             /* signaled */
-    no_satisfied,                     /* satisfied */
-    no_signal,                        /* signal */
+    NULL,                             /* satisfied */
+    NULL,                             /* signal */
     no_get_fd,                        /* get_fd */
     default_get_sync,                 /* get_sync */
     default_map_access,               /* map_access */
@@ -325,7 +325,7 @@ static const struct object_ops console_input_ops =
     NULL,                             /* remove_queue */
     NULL,                             /* signaled */
     NULL,                             /* satisfied */
-    no_signal,                        /* signal */
+    NULL,                             /* signal */
     console_input_get_fd,             /* get_fd */
     console_input_get_sync,           /* get_sync */
     default_map_access,               /* map_access */
@@ -386,7 +386,7 @@ static const struct object_ops console_output_ops =
     NULL,                             /* remove_queue */
     NULL,                             /* signaled */
     NULL,                             /* satisfied */
-    no_signal,                        /* signal */
+    NULL,                             /* signal */
     console_output_get_fd,            /* get_fd */
     console_output_get_sync,          /* get_sync */
     default_map_access,               /* map_access */
@@ -445,7 +445,7 @@ static const struct object_ops console_connection_ops =
     NULL,                             /* remove_queue */
     NULL,                             /* signaled */
     no_satisfied,                     /* satisfied */
-    no_signal,                        /* signal */
+    NULL,                             /* signal */
     console_connection_get_fd,        /* get_fd */
     default_get_sync,                 /* get_sync */
     default_map_access,               /* map_access */
diff --git a/server/debugger.c b/server/debugger.c
index 2956ee17b8e..cc096c46223 100644
--- a/server/debugger.c
+++ b/server/debugger.c
@@ -89,7 +89,7 @@ static const struct object_ops debug_event_ops =
     NULL,                          /* remove_queue */
     NULL,                          /* signaled */
     NULL,                          /* satisfied */
-    no_signal,                     /* signal */
+    NULL,                          /* signal */
     no_get_fd,                     /* get_fd */
     debug_event_get_sync,          /* get_sync */
     default_map_access,            /* map_access */
@@ -118,7 +118,7 @@ static const struct object_ops debug_obj_ops =
     NULL,                          /* remove_queue */
     NULL,                          /* signaled */
     NULL,                          /* satisfied */
-    no_signal,                     /* signal */
+    NULL,                          /* signal */
     no_get_fd,                     /* get_fd */
     debug_obj_get_sync,            /* get_sync */
     default_map_access,            /* map_access */
diff --git a/server/device.c b/server/device.c
index f4b3f19028b..35c6cca1541 100644
--- a/server/device.c
+++ b/server/device.c
@@ -67,7 +67,7 @@ static const struct object_ops irp_call_ops =
     NULL,                             /* remove_queue */
     NULL,                             /* signaled */
     NULL,                             /* satisfied */
-    no_signal,                        /* signal */
+    NULL,                             /* signal */
     no_get_fd,                        /* get_fd */
     default_get_sync,                 /* get_sync */
     default_map_access,               /* map_access */
@@ -109,7 +109,7 @@ static const struct object_ops device_manager_ops =
     NULL,                             /* remove_queue */
     NULL,                             /* signaled */
     NULL,                             /* satisfied */
-    no_signal,                        /* signal */
+    NULL,                             /* signal */
     no_get_fd,                        /* get_fd */
     device_manager_get_sync,          /* get_sync */
     default_map_access,               /* map_access */
@@ -167,7 +167,7 @@ static const struct object_ops device_ops =
     NULL,                             /* remove_queue */
     NULL,                             /* signaled */
     no_satisfied,                     /* satisfied */
-    no_signal,                        /* signal */
+    NULL,                             /* signal */
     no_get_fd,                        /* get_fd */
     default_get_sync,                 /* get_sync */
     default_map_access,               /* map_access */
@@ -220,7 +220,7 @@ static const struct object_ops device_file_ops =
     NULL,                             /* remove_queue */
     NULL,                             /* signaled */
     NULL,                             /* satisfied */
-    no_signal,                        /* signal */
+    NULL,                             /* signal */
     device_file_get_fd,               /* get_fd */
     default_fd_get_sync,              /* get_sync */
     default_map_access,               /* map_access */
diff --git a/server/directory.c b/server/directory.c
index c56c216d6d5..c80e8e17702 100644
--- a/server/directory.c
+++ b/server/directory.c
@@ -70,7 +70,7 @@ static const struct object_ops object_type_ops =
     NULL,                         /* remove_queue */
     NULL,                         /* signaled */
     NULL,                         /* satisfied */
-    no_signal,                    /* signal */
+    NULL,                         /* signal */
     no_get_fd,                    /* get_fd */
     default_get_sync,             /* get_sync */
     default_map_access,           /* map_access */
@@ -121,7 +121,7 @@ static const struct object_ops directory_ops =
     NULL,                         /* remove_queue */
     NULL,                         /* signaled */
     NULL,                         /* satisfied */
-    no_signal,                    /* signal */
+    NULL,                         /* signal */
     no_get_fd,                    /* get_fd */
     default_get_sync,             /* get_sync */
     default_map_access,           /* map_access */
diff --git a/server/event.c b/server/event.c
index c69554fc657..8a7155cc332 100644
--- a/server/event.c
+++ b/server/event.c
@@ -48,6 +48,7 @@ struct type_descr event_type =
         STANDARD_RIGHTS_EXECUTE | SYNCHRONIZE,
         EVENT_ALL_ACCESS
     },
+    EVENT_MODIFY_STATE,                   /* signal access */
 };
 
 struct event_sync
@@ -60,7 +61,7 @@ struct event_sync
 static void event_sync_dump( struct object *obj, int verbose );
 static int event_sync_signaled( struct object *obj, struct wait_queue_entry *entry );
 static void event_sync_satisfied( struct object *obj, struct wait_queue_entry *entry );
-static int event_sync_signal( struct object *obj, unsigned int access );
+static int event_sync_signal( struct object *obj );
 
 static const struct object_ops event_sync_ops =
 {
@@ -133,7 +134,7 @@ static void event_sync_satisfied( struct object *obj, struct wait_queue_entry *e
     if (!event->manual) reset_sync( event );
 }
 
-static int event_sync_signal( struct object *obj, unsigned int access )
+static int event_sync_signal( struct object *obj )
 {
     struct event_sync *event = (struct event_sync *)obj;
     assert( obj->ops == &event_sync_ops );
@@ -150,7 +151,7 @@ struct event
 
 static void event_dump( struct object *obj, int verbose );
 static struct object *event_get_sync( struct object *obj );
-static int event_signal( struct object *obj, unsigned int access);
+static int event_signal( struct object *obj );
 static struct list *event_get_kernel_obj_list( struct object *obj );
 static void event_destroy( struct object *obj );
 
@@ -211,7 +212,7 @@ static const struct object_ops keyed_event_ops =
     remove_queue,                /* remove_queue */
     keyed_event_signaled,        /* signaled */
     no_satisfied,                /* satisfied */
-    no_signal,                   /* signal */
+    NULL,                        /* signal */
     no_get_fd,                   /* get_fd */
     default_get_sync,            /* get_sync */
     default_map_access,          /* map_access */
@@ -281,16 +282,10 @@ static struct object *event_get_sync( struct object *obj )
     return grab_object( event->sync );
 }
 
-static int event_signal( struct object *obj, unsigned int access )
+static int event_signal( struct object *obj )
 {
     struct event *event = (struct event *)obj;
     assert( obj->ops == &event_ops );
-
-    if (!(access & EVENT_MODIFY_STATE))
-    {
-        set_error( STATUS_ACCESS_DENIED );
-        return 0;
-    }
     set_event( event );
     return 1;
 }
diff --git a/server/fd.c b/server/fd.c
index 1b932cc3ae3..307de7afc07 100644
--- a/server/fd.c
+++ b/server/fd.c
@@ -169,7 +169,7 @@ static const struct object_ops fd_ops =
     NULL,                     /* remove_queue */
     NULL,                     /* signaled */
     NULL,                     /* satisfied */
-    no_signal,                /* signal */
+    NULL,                     /* signal */
     no_get_fd,                /* get_fd */
     fd_get_sync,              /* get_sync */
     default_map_access,       /* map_access */
@@ -211,7 +211,7 @@ static const struct object_ops device_ops =
     NULL,                     /* remove_queue */
     NULL,                     /* signaled */
     NULL,                     /* satisfied */
-    no_signal,                /* signal */
+    NULL,                     /* signal */
     no_get_fd,                /* get_fd */
     default_get_sync,         /* get_sync */
     default_map_access,       /* map_access */
@@ -252,7 +252,7 @@ static const struct object_ops inode_ops =
     NULL,                     /* remove_queue */
     NULL,                     /* signaled */
     NULL,                     /* satisfied */
-    no_signal,                /* signal */
+    NULL,                     /* signal */
     no_get_fd,                /* get_fd */
     default_get_sync,         /* get_sync */
     default_map_access,       /* map_access */
@@ -297,7 +297,7 @@ static const struct object_ops file_lock_ops =
     NULL,                       /* remove_queue */
     NULL,                       /* signaled */
     NULL,                       /* satisfied */
-    no_signal,                  /* signal */
+    NULL,                       /* signal */
     no_get_fd,                  /* get_fd */
     file_lock_get_sync,         /* get_sync */
     default_map_access,         /* map_access */
diff --git a/server/file.c b/server/file.c
index cc5acc2aadc..840d635441d 100644
--- a/server/file.c
+++ b/server/file.c
@@ -95,7 +95,7 @@ static const struct object_ops file_ops =
     NULL,                         /* remove_queue */
     NULL,                         /* signaled */
     NULL,                         /* satisfied */
-    no_signal,                    /* signal */
+    NULL,                         /* signal */
     file_get_fd,                  /* get_fd */
     default_fd_get_sync,          /* get_sync */
     default_map_access,           /* map_access */
diff --git a/server/handle.c b/server/handle.c
index ddcf03accb2..27cccc9b249 100644
--- a/server/handle.c
+++ b/server/handle.c
@@ -127,7 +127,7 @@ static const struct object_ops handle_table_ops =
     NULL,                            /* remove_queue */
     NULL,                            /* signaled */
     NULL,                            /* satisfied */
-    no_signal,                       /* signal */
+    NULL,                            /* signal */
     no_get_fd,                       /* get_fd */
     default_get_sync,                /* get_sync */
     default_map_access,              /* map_access */
diff --git a/server/hook.c b/server/hook.c
index fe3c0459651..e1f90191451 100644
--- a/server/hook.c
+++ b/server/hook.c
@@ -77,7 +77,7 @@ static const struct object_ops hook_table_ops =
     NULL,                         /* remove_queue */
     NULL,                         /* signaled */
     NULL,                         /* satisfied */
-    no_signal,                    /* signal */
+    NULL,                         /* signal */
     no_get_fd,                    /* get_fd */
     default_get_sync,             /* get_sync */
     default_map_access,           /* map_access */
diff --git a/server/inproc_sync.c b/server/inproc_sync.c
index 9fa819bdb14..8cac3119ae4 100644
--- a/server/inproc_sync.c
+++ b/server/inproc_sync.c
@@ -71,7 +71,7 @@ static const struct object_ops inproc_sync_ops =
     NULL,                       /* remove_queue */
     NULL,                       /* signaled */
     NULL,                       /* satisfied */
-    no_signal,                  /* signal */
+    NULL,                       /* signal */
     no_get_fd,                  /* get_fd */
     default_get_sync,           /* get_sync */
     default_map_access,         /* map_access */
diff --git a/server/mailslot.c b/server/mailslot.c
index 430566d044d..f116b79f54a 100644
--- a/server/mailslot.c
+++ b/server/mailslot.c
@@ -83,7 +83,7 @@ static const struct object_ops mailslot_ops =
     NULL,                      /* remove_queue */
     NULL,                      /* signaled */
     NULL,                      /* satisfied */
-    no_signal,                 /* signal */
+    NULL,                      /* signal */
     mailslot_get_fd,           /* get_fd */
     default_fd_get_sync,       /* get_sync */
     mailslot_map_access,       /* map_access */
@@ -145,7 +145,7 @@ static const struct object_ops mail_writer_ops =
     NULL,                       /* remove_queue */
     NULL,                       /* signaled */
     NULL,                       /* satisfied */
-    no_signal,                  /* signal */
+    NULL,                       /* signal */
     mail_writer_get_fd,         /* get_fd */
     default_get_sync,           /* get_sync */
     mail_writer_map_access,     /* map_access */
@@ -211,7 +211,7 @@ static const struct object_ops mailslot_device_ops =
     NULL,                           /* remove_queue */
     NULL,                           /* signaled */
     no_satisfied,                   /* satisfied */
-    no_signal,                      /* signal */
+    NULL,                           /* signal */
     no_get_fd,                      /* get_fd */
     default_get_sync,               /* get_sync */
     default_map_access,             /* map_access */
@@ -242,7 +242,7 @@ static const struct object_ops mailslot_device_file_ops =
     NULL,                                   /* remove_queue */
     NULL,                                   /* signaled */
     NULL,                                   /* satisfied */
-    no_signal,                              /* signal */
+    NULL,                                   /* signal */
     mailslot_device_file_get_fd,            /* get_fd */
     default_fd_get_sync,                    /* get_sync */
     default_map_access,                     /* map_access */
diff --git a/server/mapping.c b/server/mapping.c
index c3f57b6394c..63914d5a65e 100644
--- a/server/mapping.c
+++ b/server/mapping.c
@@ -68,7 +68,7 @@ static const struct object_ops ranges_ops =
     NULL,                      /* remove_queue */
     NULL,                      /* signaled */
     NULL,                      /* satisfied */
-    no_signal,                 /* signal */
+    NULL,                      /* signal */
     no_get_fd,                 /* get_fd */
     default_get_sync,          /* get_sync */
     default_map_access,        /* map_access */
@@ -105,7 +105,7 @@ static const struct object_ops shared_map_ops =
     NULL,                      /* remove_queue */
     NULL,                      /* signaled */
     NULL,                      /* satisfied */
-    no_signal,                 /* signal */
+    NULL,                      /* signal */
     no_get_fd,                 /* get_fd */
     default_get_sync,          /* get_sync */
     default_map_access,        /* map_access */
@@ -179,7 +179,7 @@ static const struct object_ops mapping_ops =
     NULL,                        /* remove_queue */
     NULL,                        /* signaled */
     NULL,                        /* satisfied */
-    no_signal,                   /* signal */
+    NULL,                        /* signal */
     mapping_get_fd,              /* get_fd */
     default_get_sync,            /* get_sync */
     default_map_access,          /* map_access */
diff --git a/server/mutex.c b/server/mutex.c
index e370d301472..b92328ecd20 100644
--- a/server/mutex.c
+++ b/server/mutex.c
@@ -48,6 +48,7 @@ struct type_descr mutex_type =
         STANDARD_RIGHTS_EXECUTE | SYNCHRONIZE,
         MUTANT_ALL_ACCESS
     },
+    SYNCHRONIZE,                          /* signal access */
 };
 
 struct mutex_sync
@@ -73,7 +74,7 @@ static const struct object_ops mutex_sync_ops =
     remove_queue,              /* remove_queue */
     mutex_sync_signaled,       /* signaled */
     mutex_sync_satisfied,      /* satisfied */
-    no_signal,                 /* signal */
+    NULL,                      /* signal */
     no_get_fd,                 /* get_fd */
     default_get_sync,          /* get_sync */
     default_map_access,        /* map_access */
@@ -174,7 +175,7 @@ struct mutex
 
 static void mutex_dump( struct object *obj, int verbose );
 static struct object *mutex_get_sync( struct object *obj );
-static int mutex_signal( struct object *obj, unsigned int access );
+static int mutex_signal( struct object *obj );
 static void mutex_destroy( struct object *obj );
 
 static const struct object_ops mutex_ops =
@@ -251,16 +252,10 @@ static struct object *mutex_get_sync( struct object *obj )
     return grab_object( mutex->sync );
 }
 
-static int mutex_signal( struct object *obj, unsigned int access )
+static int mutex_signal( struct object *obj )
 {
     struct mutex *mutex = (struct mutex *)obj;
     assert( obj->ops == &mutex_ops );
-
-    if (!(access & SYNCHRONIZE))
-    {
-        set_error( STATUS_ACCESS_DENIED );
-        return 0;
-    }
     return do_release( mutex->sync, current, 1 );
 }
 
diff --git a/server/named_pipe.c b/server/named_pipe.c
index e67b25bac5d..6871585d660 100644
--- a/server/named_pipe.c
+++ b/server/named_pipe.c
@@ -120,7 +120,7 @@ static const struct object_ops named_pipe_ops =
     NULL,                         /* remove_queue */
     NULL,                         /* signaled */
     NULL,                         /* satisfied */
-    no_signal,                    /* signal */
+    NULL,                         /* signal */
     no_get_fd,                    /* get_fd */
     default_get_sync,             /* get_sync */
     named_pipe_map_access,        /* map_access */
@@ -169,7 +169,7 @@ static const struct object_ops pipe_server_ops =
     NULL,                         /* remove_queue */
     NULL,                         /* signaled */
     NULL,                         /* satisfied */
-    no_signal,                    /* signal */
+    NULL,                         /* signal */
     pipe_end_get_fd,              /* get_fd */
     default_fd_get_sync,          /* get_sync */
     default_map_access,           /* map_access */
@@ -214,7 +214,7 @@ static const struct object_ops pipe_client_ops =
     NULL,                         /* remove_queue */
     NULL,                         /* signaled */
     NULL,                         /* satisfied */
-    no_signal,                    /* signal */
+    NULL,                         /* signal */
     pipe_end_get_fd,              /* get_fd */
     default_fd_get_sync,          /* get_sync */
     default_map_access,           /* map_access */
@@ -263,7 +263,7 @@ static const struct object_ops named_pipe_device_ops =
     NULL,                             /* remove_queue */
     NULL,                             /* signaled */
     no_satisfied,                     /* satisfied */
-    no_signal,                        /* signal */
+    NULL,                             /* signal */
     no_get_fd,                        /* get_fd */
     default_get_sync,                 /* get_sync */
     default_map_access,               /* map_access */
@@ -295,7 +295,7 @@ static const struct object_ops named_pipe_device_file_ops =
     NULL,                                    /* remove_queue */
     NULL,                                    /* signaled */
     NULL,                                    /* satisfied */
-    no_signal,                               /* signal */
+    NULL,                                    /* signal */
     named_pipe_device_file_get_fd,           /* get_fd */
     default_fd_get_sync,                     /* get_sync */
     default_map_access,                      /* map_access */
@@ -346,7 +346,7 @@ static const struct object_ops named_pipe_dir_ops =
     NULL,                                    /* remove_queue */
     NULL,                                    /* signaled */
     NULL,                                    /* satisfied */
-    no_signal,                               /* signal */
+    NULL,                                    /* signal */
     named_pipe_dir_get_fd,                   /* get_fd */
     default_fd_get_sync,                     /* get_sync */
     default_map_access,                      /* map_access */
diff --git a/server/object.c b/server/object.c
index 356956aad6a..b5f9be18412 100644
--- a/server/object.c
+++ b/server/object.c
@@ -110,7 +110,7 @@ static const struct object_ops apc_reserve_ops =
     NULL,                       /* remove_queue */
     NULL,                       /* signaled */
     no_satisfied,               /* satisfied */
-    no_signal,                  /* signal */
+    NULL,                       /* signal */
     no_get_fd,                  /* get_fd */
     default_get_sync,           /* get_sync */
     default_map_access,         /* map_access */
@@ -135,7 +135,7 @@ static const struct object_ops completion_reserve_ops =
     NULL,                      /* remove_queue */
     NULL,                      /* signaled */
     no_satisfied,              /* satisfied */
-    no_signal,                 /* signal */
+    NULL,                      /* signal */
     no_get_fd,                 /* get_fd */
     default_get_sync,          /* get_sync */
     default_map_access,        /* map_access */
@@ -630,12 +630,6 @@ void no_satisfied( struct object *obj, struct wait_queue_entry *entry )
 {
 }
 
-int no_signal( struct object *obj, unsigned int access )
-{
-    set_error( STATUS_OBJECT_TYPE_MISMATCH );
-    return 0;
-}
-
 struct fd *no_get_fd( struct object *obj )
 {
     set_error( STATUS_OBJECT_TYPE_MISMATCH );
diff --git a/server/object.h b/server/object.h
index 46e4ac7e78d..a210ce6f75f 100644
--- a/server/object.h
+++ b/server/object.h
@@ -56,6 +56,7 @@ struct type_descr
     struct unicode_str name;          /* type name */
     unsigned int       valid_access;  /* mask for valid access bits */
     struct generic_map mapping;       /* generic access mapping */
+    unsigned int       signal_access; /* mask for valid signal access */
     unsigned int       index;         /* index in global array of types */
     unsigned int       obj_count;     /* count of objects of this type */
     unsigned int       handle_count;  /* count of handles of this type */
@@ -81,7 +82,7 @@ struct object_ops
     /* wait satisfied */
     void (*satisfied)(struct object *,struct wait_queue_entry *);
     /* signal an object */
-    int  (*signal)(struct object *, unsigned int);
+    int  (*signal)(struct object *);
     /* return an fd object that can be used to read/write from the object */
     struct fd *(*get_fd)(struct object *);
     /* return a sync that can be used to wait/signal the object */
@@ -170,7 +171,6 @@ extern struct object *find_object( const struct namespace *namespace, const stru
 extern struct object *find_object_index( const struct namespace *namespace, unsigned int index );
 extern int no_add_queue( struct object *obj, struct wait_queue_entry *entry );
 extern void no_satisfied( struct object *obj, struct wait_queue_entry *entry );
-extern int no_signal( struct object *obj, unsigned int access );
 extern struct fd *no_get_fd( struct object *obj );
 extern struct object *default_get_sync( struct object *obj );
 static inline struct object *get_obj_sync( struct object *obj ) { return obj->ops->get_sync( obj ); }
diff --git a/server/process.c b/server/process.c
index b9bc02b6469..d34a1af8acc 100644
--- a/server/process.c
+++ b/server/process.c
@@ -107,7 +107,7 @@ static const struct object_ops process_ops =
     NULL,                        /* remove_queue */
     NULL,                        /* signaled */
     NULL,                        /* satisfied */
-    no_signal,                   /* signal */
+    NULL,                        /* signal */
     no_get_fd,                   /* get_fd */
     process_get_sync,            /* get_sync */
     process_map_access,          /* map_access */
@@ -160,7 +160,7 @@ static const struct object_ops startup_info_ops =
     NULL,                          /* remove_queue */
     NULL,                          /* signaled */
     NULL,                          /* satisfied */
-    no_signal,                     /* signal */
+    NULL,                          /* signal */
     no_get_fd,                     /* get_fd */
     startup_info_get_sync,         /* get_sync */
     default_map_access,            /* map_access */
@@ -222,7 +222,7 @@ static const struct object_ops job_ops =
     NULL,                          /* remove_queue */
     NULL,                          /* signaled */
     NULL,                          /* satisfied */
-    no_signal,                     /* signal */
+    NULL,                          /* signal */
     no_get_fd,                     /* get_fd */
     job_get_sync,                  /* get_sync */
     default_map_access,            /* map_access */
diff --git a/server/queue.c b/server/queue.c
index 45c84192d96..54ab3abf112 100644
--- a/server/queue.c
+++ b/server/queue.c
@@ -168,7 +168,7 @@ static const struct object_ops msg_queue_ops =
     msg_queue_remove_queue,    /* remove_queue */
     msg_queue_signaled,        /* signaled */
     msg_queue_satisfied,       /* satisfied */
-    no_signal,                 /* signal */
+    NULL,                      /* signal */
     no_get_fd,                 /* get_fd */
     default_get_sync,          /* get_sync */
     default_map_access,        /* map_access */
@@ -206,7 +206,7 @@ static const struct object_ops thread_input_ops =
     NULL,                         /* remove_queue */
     NULL,                         /* signaled */
     NULL,                         /* satisfied */
-    no_signal,                    /* signal */
+    NULL,                         /* signal */
     no_get_fd,                    /* get_fd */
     default_get_sync,             /* get_sync */
     default_map_access,           /* map_access */
diff --git a/server/registry.c b/server/registry.c
index 7cfefc7a6c3..3ceb9b00558 100644
--- a/server/registry.c
+++ b/server/registry.c
@@ -181,7 +181,7 @@ static const struct object_ops key_ops =
     NULL,                    /* remove_queue */
     NULL,                    /* signaled */
     NULL,                    /* satisfied */
-    no_signal,               /* signal */
+    NULL,                    /* signal */
     no_get_fd,               /* get_fd */
     default_get_sync,        /* get_sync */
     key_map_access,          /* map_access */
diff --git a/server/request.c b/server/request.c
index 835ea30cec3..a6b7e71cf15 100644
--- a/server/request.c
+++ b/server/request.c
@@ -90,7 +90,7 @@ static const struct object_ops master_socket_ops =
     NULL,                          /* remove_queue */
     NULL,                          /* signaled */
     NULL,                          /* satisfied */
-    no_signal,                     /* signal */
+    NULL,                          /* signal */
     no_get_fd,                     /* get_fd */
     default_get_sync,              /* get_sync */
     default_map_access,            /* map_access */
diff --git a/server/semaphore.c b/server/semaphore.c
index 4b31bfe806c..f0ab1a10596 100644
--- a/server/semaphore.c
+++ b/server/semaphore.c
@@ -48,6 +48,7 @@ struct type_descr semaphore_type =
         STANDARD_RIGHTS_EXECUTE | SYNCHRONIZE,
         SEMAPHORE_ALL_ACCESS
     },
+    SEMAPHORE_MODIFY_STATE,                       /* signal access */
 };
 
 struct semaphore_sync
@@ -70,7 +71,7 @@ static const struct object_ops semaphore_sync_ops =
     remove_queue,                  /* remove_queue */
     semaphore_sync_signaled,       /* signaled */
     semaphore_sync_satisfied,      /* satisfied */
-    no_signal,                     /* signal */
+    NULL,                          /* signal */
     no_get_fd,                     /* get_fd */
     default_get_sync,              /* get_sync */
     default_map_access,            /* map_access */
@@ -148,7 +149,7 @@ struct semaphore
 
 static void semaphore_dump( struct object *obj, int verbose );
 static struct object *semaphore_get_sync( struct object *obj );
-static int semaphore_signal( struct object *obj, unsigned int access );
+static int semaphore_signal( struct object *obj );
 static void semaphore_destroy( struct object *obj );
 
 static const struct object_ops semaphore_ops =
@@ -218,16 +219,10 @@ static struct object *semaphore_get_sync( struct object *obj )
     return grab_object( sem->sync );
 }
 
-static int semaphore_signal( struct object *obj, unsigned int access )
+static int semaphore_signal( struct object *obj )
 {
     struct semaphore *sem = (struct semaphore *)obj;
     assert( obj->ops == &semaphore_ops );
-
-    if (!(access & SEMAPHORE_MODIFY_STATE))
-    {
-        set_error( STATUS_ACCESS_DENIED );
-        return 0;
-    }
     return release_semaphore( sem->sync, 1, NULL );
 }
 
diff --git a/server/serial.c b/server/serial.c
index 66cb4aabfbc..40150080ce1 100644
--- a/server/serial.c
+++ b/server/serial.c
@@ -92,7 +92,7 @@ static const struct object_ops serial_ops =
     NULL,                         /* remove_queue */
     NULL,                         /* signaled */
     NULL,                         /* satisfied */
-    no_signal,                    /* signal */
+    NULL,                         /* signal */
     serial_get_fd,                /* get_fd */
     default_fd_get_sync,          /* get_sync */
     default_map_access,           /* map_access */
diff --git a/server/signal.c b/server/signal.c
index 078951af6e4..f7a03b3aaf1 100644
--- a/server/signal.c
+++ b/server/signal.c
@@ -63,7 +63,7 @@ static const struct object_ops handler_ops =
     NULL,                     /* remove_queue */
     NULL,                     /* signaled */
     NULL,                     /* satisfied */
-    no_signal,                /* signal */
+    NULL,                     /* signal */
     no_get_fd,                /* get_fd */
     default_get_sync,         /* get_sync */
     default_map_access,       /* map_access */
diff --git a/server/sock.c b/server/sock.c
index 7785d3c7706..75971c3980a 100644
--- a/server/sock.c
+++ b/server/sock.c
@@ -487,7 +487,7 @@ static const struct object_ops sock_ops =
     NULL,                         /* remove_queue */
     NULL,                         /* signaled */
     NULL,                         /* satisfied */
-    no_signal,                    /* signal */
+    NULL,                         /* signal */
     sock_get_fd,                  /* get_fd */
     default_fd_get_sync,          /* get_sync */
     default_map_access,           /* map_access */
@@ -3707,7 +3707,7 @@ static const struct object_ops ifchange_ops =
     NULL,                    /* remove_queue */
     NULL,                    /* signaled */
     no_satisfied,            /* satisfied */
-    no_signal,               /* signal */
+    NULL,                    /* signal */
     ifchange_get_fd,         /* get_fd */
     default_get_sync,        /* get_sync */
     default_map_access,      /* map_access */
@@ -3929,7 +3929,7 @@ static const struct object_ops socket_device_ops =
     NULL,                       /* remove_queue */
     NULL,                       /* signaled */
     no_satisfied,               /* satisfied */
-    no_signal,                  /* signal */
+    NULL,                       /* signal */
     no_get_fd,                  /* get_fd */
     default_get_sync,           /* get_sync */
     default_map_access,         /* map_access */
diff --git a/server/symlink.c b/server/symlink.c
index 238dcfad1c7..f294e7f0912 100644
--- a/server/symlink.c
+++ b/server/symlink.c
@@ -72,7 +72,7 @@ static const struct object_ops symlink_ops =
     NULL,                         /* remove_queue */
     NULL,                         /* signaled */
     NULL,                         /* satisfied */
-    no_signal,                    /* signal */
+    NULL,                         /* signal */
     no_get_fd,                    /* get_fd */
     default_get_sync,             /* get_sync */
     default_map_access,           /* map_access */
diff --git a/server/thread.c b/server/thread.c
index 8588d49b845..23b3d98dd10 100644
--- a/server/thread.c
+++ b/server/thread.c
@@ -109,7 +109,7 @@ static const struct object_ops thread_apc_ops =
     NULL,                       /* remove_queue */
     NULL,                       /* signaled */
     NULL,                       /* satisfied */
-    no_signal,                  /* signal */
+    NULL,                       /* signal */
     no_get_fd,                  /* get_fd */
     thread_apc_get_sync,        /* get_sync */
     default_map_access,         /* map_access */
@@ -154,7 +154,7 @@ static const struct object_ops context_ops =
     NULL,                       /* remove_queue */
     NULL,                       /* signaled */
     NULL,                       /* satisfied */
-    no_signal,                  /* signal */
+    NULL,                       /* signal */
     no_get_fd,                  /* get_fd */
     context_get_sync,           /* get_sync */
     default_map_access,         /* map_access */
@@ -204,7 +204,7 @@ static const struct object_ops thread_ops =
     NULL,                       /* remove_queue */
     NULL,                       /* signaled */
     NULL,                       /* satisfied */
-    no_signal,                  /* signal */
+    NULL,                       /* signal */
     no_get_fd,                  /* get_fd */
     thread_get_sync,            /* get_sync */
     thread_map_access,          /* map_access */
@@ -1266,6 +1266,14 @@ static void thread_timeout( void *ptr )
     wake_thread( thread );
 }
 
+/* check if an event flag, a semaphore or a mutex can be signaled */
+static unsigned int check_signal_access( struct object *obj, unsigned int access )
+{
+    if (!obj->ops->type->signal_access) return STATUS_OBJECT_TYPE_MISMATCH;
+    if (!(access & obj->ops->type->signal_access)) return STATUS_ACCESS_DENIED;
+    return STATUS_SUCCESS;
+}
+
 /* try signaling an event flag, a semaphore or a mutex */
 static int signal_object( obj_handle_t handle )
 {
@@ -1275,7 +1283,9 @@ static int signal_object( obj_handle_t handle )
     obj = get_handle_obj( current->process, handle, 0, NULL );
     if (obj)
     {
-        ret = obj->ops->signal( obj, get_handle_access( current->process, handle ));
+        unsigned int status, access = get_handle_access( current->process, handle );
+        if ((status = check_signal_access( obj, access ))) set_error( status );
+        else ret = obj->ops->signal( obj );
         release_object( obj );
     }
     return ret;
diff --git a/server/timer.c b/server/timer.c
index 522fc6a7113..4d2adf18672 100644
--- a/server/timer.c
+++ b/server/timer.c
@@ -77,7 +77,7 @@ static const struct object_ops timer_ops =
     NULL,                      /* remove_queue */
     NULL,                      /* signaled */
     NULL,                      /* satisfied */
-    no_signal,                 /* signal */
+    NULL,                      /* signal */
     no_get_fd,                 /* get_fd */
     timer_get_sync,            /* get_sync */
     default_map_access,        /* map_access */
diff --git a/server/token.c b/server/token.c
index 5ce7298211e..f1502b718a8 100644
--- a/server/token.c
+++ b/server/token.c
@@ -146,7 +146,7 @@ static const struct object_ops token_ops =
     NULL,                      /* remove_queue */
     NULL,                      /* signaled */
     NULL,                      /* satisfied */
-    no_signal,                 /* signal */
+    NULL,                      /* signal */
     no_get_fd,                 /* get_fd */
     default_get_sync,          /* get_sync */
     default_map_access,        /* map_access */
diff --git a/server/window.c b/server/window.c
index 9f871ed9494..5a6f18f6d31 100644
--- a/server/window.c
+++ b/server/window.c
@@ -109,7 +109,7 @@ static const struct object_ops window_ops =
     NULL,                     /* remove_queue */
     NULL,                     /* signaled */
     NULL,                     /* satisfied */
-    no_signal,                /* signal */
+    NULL,                     /* signal */
     no_get_fd,                /* get_fd */
     default_get_sync,         /* get_sync */
     default_map_access,       /* map_access */
diff --git a/server/winstation.c b/server/winstation.c
index bfcd4a53613..a747af51162 100644
--- a/server/winstation.c
+++ b/server/winstation.c
@@ -77,7 +77,7 @@ static const struct object_ops winstation_ops =
     NULL,                         /* remove_queue */
     NULL,                         /* signaled */
     NULL,                         /* satisfied */
-    no_signal,                    /* signal */
+    NULL,                         /* signal */
     no_get_fd,                    /* get_fd */
     default_get_sync,             /* get_sync */
     default_map_access,           /* map_access */
@@ -118,7 +118,7 @@ static const struct object_ops desktop_ops =
     NULL,                         /* remove_queue */
     NULL,                         /* signaled */
     NULL,                         /* satisfied */
-    no_signal,                    /* signal */
+    NULL,                         /* signal */
     no_get_fd,                    /* get_fd */
     default_get_sync,             /* get_sync */
     default_map_access,           /* map_access */
-- 
2.51.0


From b7b84c285322ef0e829be34affbe494b63d2829d Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Thu, 4 Sep 2025 23:30:38 +0200
Subject: [PATCH 08/16] server: Move the signal object op to object syncs.

Signed-off-by: Vasiliy Stelmachenok <ventureo@cachyos.org>
---
 server/event.c     | 11 +----------
 server/mutex.c     | 20 ++++++++++----------
 server/semaphore.c | 20 ++++++++++----------
 server/thread.c    | 10 +++++++++-
 4 files changed, 30 insertions(+), 31 deletions(-)

diff --git a/server/event.c b/server/event.c
index 8a7155cc332..a6ed7d16ace 100644
--- a/server/event.c
+++ b/server/event.c
@@ -151,7 +151,6 @@ struct event
 
 static void event_dump( struct object *obj, int verbose );
 static struct object *event_get_sync( struct object *obj );
-static int event_signal( struct object *obj );
 static struct list *event_get_kernel_obj_list( struct object *obj );
 static void event_destroy( struct object *obj );
 
@@ -164,7 +163,7 @@ static const struct object_ops event_ops =
     NULL,                      /* remove_queue */
     NULL,                      /* signaled */
     NULL,                      /* satisfied */
-    event_signal,              /* signal */
+    NULL,                      /* signal */
     no_get_fd,                 /* get_fd */
     event_get_sync,            /* get_sync */
     default_map_access,        /* map_access */
@@ -282,14 +281,6 @@ static struct object *event_get_sync( struct object *obj )
     return grab_object( event->sync );
 }
 
-static int event_signal( struct object *obj )
-{
-    struct event *event = (struct event *)obj;
-    assert( obj->ops == &event_ops );
-    set_event( event );
-    return 1;
-}
-
 static struct list *event_get_kernel_obj_list( struct object *obj )
 {
     struct event *event = (struct event *)obj;
diff --git a/server/mutex.c b/server/mutex.c
index b92328ecd20..860fd14c1ef 100644
--- a/server/mutex.c
+++ b/server/mutex.c
@@ -63,6 +63,7 @@ struct mutex_sync
 static void mutex_sync_dump( struct object *obj, int verbose );
 static int mutex_sync_signaled( struct object *obj, struct wait_queue_entry *entry );
 static void mutex_sync_satisfied( struct object *obj, struct wait_queue_entry *entry );
+static int mutex_sync_signal( struct object *obj );
 static void mutex_sync_destroy( struct object *obj );
 
 static const struct object_ops mutex_sync_ops =
@@ -74,7 +75,7 @@ static const struct object_ops mutex_sync_ops =
     remove_queue,              /* remove_queue */
     mutex_sync_signaled,       /* signaled */
     mutex_sync_satisfied,      /* satisfied */
-    NULL,                      /* signal */
+    mutex_sync_signal,         /* signal */
     no_get_fd,                 /* get_fd */
     default_get_sync,          /* get_sync */
     default_map_access,        /* map_access */
@@ -154,6 +155,13 @@ static void mutex_sync_satisfied( struct object *obj, struct wait_queue_entry *e
     mutex->abandoned = 0;
 }
 
+static int mutex_sync_signal( struct object *obj )
+{
+    struct mutex_sync *mutex = (struct mutex_sync *)obj;
+    assert( obj->ops == &mutex_sync_ops );
+    return do_release( mutex, current, 1 );
+}
+
 static struct mutex_sync *create_mutex_sync( int owned )
 {
     struct mutex_sync *mutex;
@@ -175,7 +183,6 @@ struct mutex
 
 static void mutex_dump( struct object *obj, int verbose );
 static struct object *mutex_get_sync( struct object *obj );
-static int mutex_signal( struct object *obj );
 static void mutex_destroy( struct object *obj );
 
 static const struct object_ops mutex_ops =
@@ -187,7 +194,7 @@ static const struct object_ops mutex_ops =
     NULL,                      /* remove_queue */
     NULL,                      /* signaled */
     NULL,                      /* satisfied */
-    mutex_signal,              /* signal */
+    NULL,                      /* signal */
     no_get_fd,                 /* get_fd */
     mutex_get_sync,            /* get_sync */
     default_map_access,        /* map_access */
@@ -252,13 +259,6 @@ static struct object *mutex_get_sync( struct object *obj )
     return grab_object( mutex->sync );
 }
 
-static int mutex_signal( struct object *obj )
-{
-    struct mutex *mutex = (struct mutex *)obj;
-    assert( obj->ops == &mutex_ops );
-    return do_release( mutex->sync, current, 1 );
-}
-
 static void mutex_destroy( struct object *obj )
 {
     struct mutex *mutex = (struct mutex *)obj;
diff --git a/server/semaphore.c b/server/semaphore.c
index f0ab1a10596..355d91b0633 100644
--- a/server/semaphore.c
+++ b/server/semaphore.c
@@ -61,6 +61,7 @@ struct semaphore_sync
 static void semaphore_sync_dump( struct object *obj, int verbose );
 static int semaphore_sync_signaled( struct object *obj, struct wait_queue_entry *entry );
 static void semaphore_sync_satisfied( struct object *obj, struct wait_queue_entry *entry );
+static int semaphore_sync_signal( struct object *obj );
 
 static const struct object_ops semaphore_sync_ops =
 {
@@ -71,7 +72,7 @@ static const struct object_ops semaphore_sync_ops =
     remove_queue,                  /* remove_queue */
     semaphore_sync_signaled,       /* signaled */
     semaphore_sync_satisfied,      /* satisfied */
-    NULL,                          /* signal */
+    semaphore_sync_signal,         /* signal */
     no_get_fd,                     /* get_fd */
     default_get_sync,              /* get_sync */
     default_map_access,            /* map_access */
@@ -131,6 +132,13 @@ static void semaphore_sync_satisfied( struct object *obj, struct wait_queue_entr
     sem->count--;
 }
 
+static int semaphore_sync_signal( struct object *obj )
+{
+    struct semaphore_sync *sem = (struct semaphore_sync *)obj;
+    assert( obj->ops == &semaphore_sync_ops );
+    return release_semaphore( sem, 1, NULL );
+}
+
 static struct semaphore_sync *create_semaphore_sync( unsigned int initial, unsigned int max )
 {
     struct semaphore_sync *sem;
@@ -149,7 +157,6 @@ struct semaphore
 
 static void semaphore_dump( struct object *obj, int verbose );
 static struct object *semaphore_get_sync( struct object *obj );
-static int semaphore_signal( struct object *obj );
 static void semaphore_destroy( struct object *obj );
 
 static const struct object_ops semaphore_ops =
@@ -161,7 +168,7 @@ static const struct object_ops semaphore_ops =
     NULL,                          /* remove_queue */
     NULL,                          /* signaled */
     NULL,                          /* satisfied */
-    semaphore_signal,              /* signal */
+    NULL,                          /* signal */
     no_get_fd,                     /* get_fd */
     semaphore_get_sync,            /* get_sync */
     default_map_access,            /* map_access */
@@ -219,13 +226,6 @@ static struct object *semaphore_get_sync( struct object *obj )
     return grab_object( sem->sync );
 }
 
-static int semaphore_signal( struct object *obj )
-{
-    struct semaphore *sem = (struct semaphore *)obj;
-    assert( obj->ops == &semaphore_ops );
-    return release_semaphore( sem->sync, 1, NULL );
-}
-
 static void semaphore_destroy( struct object *obj )
 {
     struct semaphore *sem = (struct semaphore *)obj;
diff --git a/server/thread.c b/server/thread.c
index 23b3d98dd10..78543047a34 100644
--- a/server/thread.c
+++ b/server/thread.c
@@ -1037,6 +1037,14 @@ static int object_sync_signaled( struct object *obj, struct wait_queue_entry *en
     return ret;
 }
 
+static int object_sync_signal( struct object *obj )
+{
+    struct object *sync = get_obj_sync( obj );
+    int ret = sync->ops->signal( sync );
+    release_object( sync );
+    return ret;
+}
+
 /* finish waiting */
 static unsigned int end_wait( struct thread *thread, unsigned int status )
 {
@@ -1285,7 +1293,7 @@ static int signal_object( obj_handle_t handle )
     {
         unsigned int status, access = get_handle_access( current->process, handle );
         if ((status = check_signal_access( obj, access ))) set_error( status );
-        else ret = obj->ops->signal( obj );
+        else ret = object_sync_signal( obj );
         release_object( obj );
     }
     return ret;
-- 
2.51.0


From dbb26f9f882d32cdfd936eca688450fa48fa46f0 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Thu, 4 Sep 2025 23:31:23 +0200
Subject: [PATCH 09/16] server: Use the signal ops to signal event and inproc
 syncs.

Signed-off-by: Vasiliy Stelmachenok <ventureo@cachyos.org>
---
 server/event.c       | 22 ++++++++++++----------
 server/inproc_sync.c | 33 ++++++++++++++++++++++++++++++---
 server/mutex.c       |  4 ++--
 server/object.h      |  4 ++--
 server/semaphore.c   |  4 ++--
 server/thread.c      |  2 +-
 6 files changed, 49 insertions(+), 20 deletions(-)

diff --git a/server/event.c b/server/event.c
index a6ed7d16ace..074c902b139 100644
--- a/server/event.c
+++ b/server/event.c
@@ -61,7 +61,7 @@ struct event_sync
 static void event_sync_dump( struct object *obj, int verbose );
 static int event_sync_signaled( struct object *obj, struct wait_queue_entry *entry );
 static void event_sync_satisfied( struct object *obj, struct wait_queue_entry *entry );
-static int event_sync_signal( struct object *obj );
+static int event_sync_signal( struct object *obj, int signal );
 
 static const struct object_ops event_sync_ops =
 {
@@ -114,16 +114,16 @@ static int event_sync_signaled( struct object *obj, struct wait_queue_entry *ent
     return event->signaled;
 }
 
-void signal_sync( struct event_sync *event )
+void signal_sync( struct event_sync *sync )
 {
-    event->signaled = 1;
-    /* wake up all waiters if manual reset, a single one otherwise */
-    wake_up( &event->obj, !event->manual );
+    assert( sync->obj.ops->signal );
+    sync->obj.ops->signal( &sync->obj, 1 );
 }
 
-void reset_sync( struct event_sync *event )
+void reset_sync( struct event_sync *sync )
 {
-    event->signaled = 0;
+    assert( sync->obj.ops->signal );
+    sync->obj.ops->signal( &sync->obj, 0 );
 }
 
 static void event_sync_satisfied( struct object *obj, struct wait_queue_entry *entry )
@@ -131,14 +131,16 @@ static void event_sync_satisfied( struct object *obj, struct wait_queue_entry *e
     struct event_sync *event = (struct event_sync *)obj;
     assert( obj->ops == &event_sync_ops );
     /* Reset if it's an auto-reset event */
-    if (!event->manual) reset_sync( event );
+    if (!event->manual) event->signaled = 0;
 }
 
-static int event_sync_signal( struct object *obj )
+static int event_sync_signal( struct object *obj, int signal )
 {
     struct event_sync *event = (struct event_sync *)obj;
     assert( obj->ops == &event_sync_ops );
-    signal_sync( event );
+
+    /* wake up all waiters if manual reset, a single one otherwise */
+    if ((event->signaled = !!signal)) wake_up( &event->obj, !event->manual );
     return 1;
 }
 
diff --git a/server/inproc_sync.c b/server/inproc_sync.c
index 8cac3119ae4..5e9a5fd173b 100644
--- a/server/inproc_sync.c
+++ b/server/inproc_sync.c
@@ -60,6 +60,7 @@ struct inproc_sync
 };
 
 static void inproc_sync_dump( struct object *obj, int verbose );
+static int inproc_sync_signal( struct object *obj, int signal );
 static void inproc_sync_destroy( struct object *obj );
 
 static const struct object_ops inproc_sync_ops =
@@ -71,7 +72,7 @@ static const struct object_ops inproc_sync_ops =
     NULL,                       /* remove_queue */
     NULL,                       /* signaled */
     NULL,                       /* satisfied */
-    NULL,                       /* signal */
+    inproc_sync_signal,         /* signal */
     no_get_fd,                  /* get_fd */
     default_get_sync,           /* get_sync */
     default_map_access,         /* map_access */
@@ -112,20 +113,46 @@ static void inproc_sync_dump( struct object *obj, int verbose )
     fprintf( stderr, "Inproc sync type=%d, fd=%d\n", sync->type, sync->fd );
 }
 
-void signal_inproc_sync( struct inproc_sync *sync )
+static void signal_sync_fd( struct inproc_sync *sync )
 {
     __u32 count;
     if (debug_level) fprintf( stderr, "set_inproc_event %d\n", sync->fd );
     ioctl( sync->fd, NTSYNC_IOC_EVENT_SET, &count );
 }
 
-void reset_inproc_sync( struct inproc_sync *sync )
+static void reset_sync_fd( struct inproc_sync *sync )
 {
     __u32 count;
     if (debug_level) fprintf( stderr, "reset_inproc_event %d\n", sync->fd );
     ioctl( sync->fd, NTSYNC_IOC_EVENT_RESET, &count );
 }
 
+static int inproc_sync_signal( struct object *obj, int signal )
+{
+    struct inproc_sync *sync = (struct inproc_sync *)obj;
+
+    assert( obj->ops == &inproc_sync_ops );
+    assert( sync->type == INPROC_SYNC_INTERNAL );
+    assert( signal == 0 || signal == 1 );
+
+    if (signal) signal_sync_fd( sync );
+    else reset_sync_fd( sync );
+
+    return 1;
+}
+
+void signal_inproc_sync( struct inproc_sync *sync )
+{
+    assert( sync->obj.ops->signal );
+    sync->obj.ops->signal( &sync->obj, 1 );
+}
+
+void reset_inproc_sync( struct inproc_sync *sync )
+{
+    assert( sync->obj.ops->signal );
+    sync->obj.ops->signal( &sync->obj, 0 );
+}
+
 static void inproc_sync_destroy( struct object *obj )
 {
     struct inproc_sync *sync = (struct inproc_sync *)obj;
diff --git a/server/mutex.c b/server/mutex.c
index 860fd14c1ef..88448870ba5 100644
--- a/server/mutex.c
+++ b/server/mutex.c
@@ -63,7 +63,7 @@ struct mutex_sync
 static void mutex_sync_dump( struct object *obj, int verbose );
 static int mutex_sync_signaled( struct object *obj, struct wait_queue_entry *entry );
 static void mutex_sync_satisfied( struct object *obj, struct wait_queue_entry *entry );
-static int mutex_sync_signal( struct object *obj );
+static int mutex_sync_signal( struct object *obj, int signal );
 static void mutex_sync_destroy( struct object *obj );
 
 static const struct object_ops mutex_sync_ops =
@@ -155,7 +155,7 @@ static void mutex_sync_satisfied( struct object *obj, struct wait_queue_entry *e
     mutex->abandoned = 0;
 }
 
-static int mutex_sync_signal( struct object *obj )
+static int mutex_sync_signal( struct object *obj, int signal )
 {
     struct mutex_sync *mutex = (struct mutex_sync *)obj;
     assert( obj->ops == &mutex_sync_ops );
diff --git a/server/object.h b/server/object.h
index a210ce6f75f..509bacbff4e 100644
--- a/server/object.h
+++ b/server/object.h
@@ -81,8 +81,8 @@ struct object_ops
     int  (*signaled)(struct object *,struct wait_queue_entry *);
     /* wait satisfied */
     void (*satisfied)(struct object *,struct wait_queue_entry *);
-    /* signal an object */
-    int  (*signal)(struct object *);
+    /* signal/reset an object */
+    int  (*signal)(struct object *,int);
     /* return an fd object that can be used to read/write from the object */
     struct fd *(*get_fd)(struct object *);
     /* return a sync that can be used to wait/signal the object */
diff --git a/server/semaphore.c b/server/semaphore.c
index 355d91b0633..607eae929a9 100644
--- a/server/semaphore.c
+++ b/server/semaphore.c
@@ -61,7 +61,7 @@ struct semaphore_sync
 static void semaphore_sync_dump( struct object *obj, int verbose );
 static int semaphore_sync_signaled( struct object *obj, struct wait_queue_entry *entry );
 static void semaphore_sync_satisfied( struct object *obj, struct wait_queue_entry *entry );
-static int semaphore_sync_signal( struct object *obj );
+static int semaphore_sync_signal( struct object *obj, int signal );
 
 static const struct object_ops semaphore_sync_ops =
 {
@@ -132,7 +132,7 @@ static void semaphore_sync_satisfied( struct object *obj, struct wait_queue_entr
     sem->count--;
 }
 
-static int semaphore_sync_signal( struct object *obj )
+static int semaphore_sync_signal( struct object *obj, int signal )
 {
     struct semaphore_sync *sem = (struct semaphore_sync *)obj;
     assert( obj->ops == &semaphore_sync_ops );
diff --git a/server/thread.c b/server/thread.c
index 78543047a34..5975c517bfc 100644
--- a/server/thread.c
+++ b/server/thread.c
@@ -1040,7 +1040,7 @@ static int object_sync_signaled( struct object *obj, struct wait_queue_entry *en
 static int object_sync_signal( struct object *obj )
 {
     struct object *sync = get_obj_sync( obj );
-    int ret = sync->ops->signal( sync );
+    int ret = sync->ops->signal( sync, -1 );
     release_object( sync );
     return ret;
 }
-- 
2.51.0


From 043480891f2f3d78aaeddbca446991a515d861e9 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Thu, 4 Sep 2025 23:39:05 +0200
Subject: [PATCH 10/16] server: Use struct object pointers for object syncs.

Signed-off-by: Vasiliy Stelmachenok <ventureo@cachyos.org>
---
 server/completion.c  |  2 +-
 server/console.c     | 16 ++++++++--------
 server/debugger.c    |  4 ++--
 server/device.c      |  2 +-
 server/event.c       | 32 +++++++++++++-------------------
 server/fd.c          |  4 ++--
 server/inproc_sync.c | 26 +++-----------------------
 server/mutex.c       | 24 +++++++++++++++---------
 server/object.h      | 12 ++++--------
 server/process.c     |  4 ++--
 server/process.h     |  2 +-
 server/queue.c       |  8 ++++----
 server/semaphore.c   | 20 +++++++++++++-------
 server/thread.c      | 30 +++++++++++++++++++++---------
 server/thread.h      |  6 +++---
 server/timer.c       |  2 +-
 16 files changed, 94 insertions(+), 100 deletions(-)

diff --git a/server/completion.c b/server/completion.c
index 60f8ad409b2..3180222b14b 100644
--- a/server/completion.c
+++ b/server/completion.c
@@ -73,7 +73,7 @@ struct completion_wait
 struct completion
 {
     struct object       obj;
-    struct event_sync  *sync;
+    struct object      *sync;
     struct list         queue;
     struct list         wait_queue;
     unsigned int        depth;
diff --git a/server/console.c b/server/console.c
index 0bb5a6b24c0..809a77cfa67 100644
--- a/server/console.c
+++ b/server/console.c
@@ -53,7 +53,7 @@ struct history_line
 struct console
 {
     struct object                obj;           /* object header */
-    struct event_sync           *sync;          /* sync object for wait/signal */
+    struct object               *sync;          /* sync object for wait/signal */
     struct thread               *renderer;      /* console renderer thread */
     struct screen_buffer        *active;        /* active screen buffer */
     struct console_server       *server;        /* console server object */
@@ -134,7 +134,7 @@ struct console_host_ioctl
 struct console_server
 {
     struct object         obj;            /* object header */
-    struct event_sync    *sync;           /* sync object for wait/signal */
+    struct object        *sync;           /* sync object for wait/signal */
     struct fd            *fd;             /* pseudo-fd for ioctls */
     struct console       *console;        /* attached console */
     struct list           queue;          /* ioctl queue */
@@ -210,7 +210,7 @@ struct font_info
 struct screen_buffer
 {
     struct object         obj;           /* object header */
-    struct event_sync    *sync;          /* sync object for wait/signal */
+    struct object        *sync;          /* sync object for wait/signal */
     struct list           entry;         /* entry in list of all screen buffers */
     struct console       *input;         /* associated console input */
     unsigned int          id;            /* buffer id */
@@ -303,7 +303,7 @@ static const struct object_ops console_device_ops =
 struct console_input
 {
     struct object         obj;         /* object header */
-    struct event_sync    *sync;        /* sync object for wait/signal */
+    struct object        *sync;        /* sync object for wait/signal */
     struct fd            *fd;          /* pseudo-fd */
     struct list           entry;       /* entry in console->inputs */
     struct console       *console;     /* associated console at creation time */
@@ -364,7 +364,7 @@ static const struct fd_ops console_input_fd_ops =
 struct console_output
 {
     struct object         obj;         /* object header */
-    struct event_sync    *sync;        /* sync object for wait/signal */
+    struct object        *sync;        /* sync object for wait/signal */
     struct fd            *fd;          /* pseudo-fd */
     struct list           entry;       /* entry in console->outputs */
     struct console       *console;     /* associated console at creation time */
@@ -646,7 +646,7 @@ static struct object *create_screen_buffer( struct console *console )
     }
 
     if (!(screen_buffer = alloc_object( &screen_buffer_ops ))) return NULL;
-    screen_buffer->sync  = (struct event_sync *)grab_object( console->sync );
+    screen_buffer->sync  = grab_object( console->sync );
     screen_buffer->id    = ++console->last_id;
     screen_buffer->input = console;
     init_async_queue( &screen_buffer->ioctl_q );
@@ -1350,7 +1350,7 @@ static struct object *console_device_lookup_name( struct object *obj, struct uni
 
         name->len = 0;
         if (!(console_input = alloc_object( &console_input_ops ))) return NULL;
-        console_input->sync = (struct event_sync *)grab_object( current->process->console->sync );
+        console_input->sync = grab_object( current->process->console->sync );
         console_input->fd = alloc_pseudo_fd( &console_input_fd_ops, &console_input->obj,
                                              FILE_SYNCHRONOUS_IO_NONALERT );
         if (!console_input->fd)
@@ -1375,7 +1375,7 @@ static struct object *console_device_lookup_name( struct object *obj, struct uni
 
         name->len = 0;
         if (!(console_output = alloc_object( &console_output_ops ))) return NULL;
-        console_output->sync = (struct event_sync *)grab_object( current->process->console->sync );
+        console_output->sync = grab_object( current->process->console->sync );
         console_output->fd = alloc_pseudo_fd( &console_output_fd_ops, &console_output->obj,
                                              FILE_SYNCHRONOUS_IO_NONALERT );
         if (!console_output->fd)
diff --git a/server/debugger.c b/server/debugger.c
index cc096c46223..7c48355408b 100644
--- a/server/debugger.c
+++ b/server/debugger.c
@@ -43,7 +43,7 @@ enum debug_event_state { EVENT_QUEUED, EVENT_SENT, EVENT_DELAYED, EVENT_CONTINUE
 struct debug_event
 {
     struct object          obj;       /* object header */
-    struct event_sync     *sync;      /* sync object for wait/signal */
+    struct object         *sync;      /* sync object for wait/signal */
     struct list            entry;     /* entry in event queue */
     struct thread         *sender;    /* thread which sent this event */
     struct file           *file;      /* file object for events that need one */
@@ -70,7 +70,7 @@ struct type_descr debug_obj_type =
 struct debug_obj
 {
     struct object        obj;         /* object header */
-    struct event_sync   *sync;       /* sync object for wait/signal */
+    struct object       *sync;       /* sync object for wait/signal */
     struct list          event_queue; /* pending events queue */
     unsigned int         flags;       /* debug flags */
 };
diff --git a/server/device.c b/server/device.c
index 35c6cca1541..0ff5ef676c4 100644
--- a/server/device.c
+++ b/server/device.c
@@ -89,7 +89,7 @@ static const struct object_ops irp_call_ops =
 struct device_manager
 {
     struct object          obj;            /* object header */
-    struct event_sync     *sync;           /* sync object for wait/signal */
+    struct object         *sync;           /* sync object for wait/signal */
     struct list            devices;        /* list of devices */
     struct list            requests;       /* list of pending irps across all devices */
     struct irp_call       *current_call;   /* call currently executed on client side */
diff --git a/server/event.c b/server/event.c
index 074c902b139..5f6802c68e6 100644
--- a/server/event.c
+++ b/server/event.c
@@ -88,7 +88,7 @@ static const struct object_ops event_sync_ops =
     no_destroy                 /* destroy */
 };
 
-struct event_sync *create_event_sync( int manual, int signaled )
+struct object *create_event_sync( int manual, int signaled )
 {
     struct event_sync *event;
 
@@ -96,7 +96,7 @@ struct event_sync *create_event_sync( int manual, int signaled )
     event->manual   = manual;
     event->signaled = signaled;
 
-    return event;
+    return &event->obj;
 }
 
 static void event_sync_dump( struct object *obj, int verbose )
@@ -114,18 +114,6 @@ static int event_sync_signaled( struct object *obj, struct wait_queue_entry *ent
     return event->signaled;
 }
 
-void signal_sync( struct event_sync *sync )
-{
-    assert( sync->obj.ops->signal );
-    sync->obj.ops->signal( &sync->obj, 1 );
-}
-
-void reset_sync( struct event_sync *sync )
-{
-    assert( sync->obj.ops->signal );
-    sync->obj.ops->signal( &sync->obj, 0 );
-}
-
 static void event_sync_satisfied( struct object *obj, struct wait_queue_entry *entry )
 {
     struct event_sync *event = (struct event_sync *)obj;
@@ -147,7 +135,7 @@ static int event_sync_signal( struct object *obj, int signal )
 struct event
 {
     struct object      obj;             /* object header */
-    struct event_sync *sync;            /* event sync object */
+    struct object     *sync;            /* event sync object */
     struct list        kernel_object;   /* list of kernel object pointers */
 };
 
@@ -273,7 +261,7 @@ static void event_dump( struct object *obj, int verbose )
 {
     struct event *event = (struct event *)obj;
     assert( obj->ops == &event_ops );
-    event->sync->obj.ops->dump( &event->sync->obj, verbose );
+    event->sync->ops->dump( event->sync, verbose );
 }
 
 static struct object *event_get_sync( struct object *obj )
@@ -387,11 +375,14 @@ DECL_HANDLER(open_event)
 /* do an event operation */
 DECL_HANDLER(event_op)
 {
+    struct event_sync *sync;
     struct event *event;
 
     if (!(event = get_event_obj( current->process, req->handle, EVENT_MODIFY_STATE ))) return;
+    sync = (struct event_sync *)event->sync;
+    assert( event->sync->ops == &event_sync_ops );
 
-    reply->state = event->sync->signaled;
+    reply->state = sync->signaled;
     switch(req->op)
     {
     case PULSE_EVENT:
@@ -414,12 +405,15 @@ DECL_HANDLER(event_op)
 /* return details about the event */
 DECL_HANDLER(query_event)
 {
+    struct event_sync *sync;
     struct event *event;
 
     if (!(event = get_event_obj( current->process, req->handle, EVENT_QUERY_STATE ))) return;
+    sync = (struct event_sync *)event->sync;
+    assert( event->sync->ops == &event_sync_ops );
 
-    reply->manual_reset = event->sync->manual;
-    reply->state = event->sync->signaled;
+    reply->manual_reset = sync->manual;
+    reply->state = sync->signaled;
 
     release_object( event );
 }
diff --git a/server/fd.c b/server/fd.c
index 307de7afc07..34da01de406 100644
--- a/server/fd.c
+++ b/server/fd.c
@@ -129,7 +129,7 @@ struct fd
 {
     struct object        obj;         /* object header */
     const struct fd_ops *fd_ops;      /* file descriptor operations */
-    struct event_sync   *sync;        /* sync object for wait/signal */
+    struct object       *sync;        /* sync object for wait/signal */
     struct inode        *inode;       /* inode that this fd belongs to */
     struct list          inode_entry; /* entry in inode fd list */
     struct closed_fd    *closed;      /* structure to store the unix fd at destroy time */
@@ -273,7 +273,7 @@ static const struct object_ops inode_ops =
 struct file_lock
 {
     struct object       obj;         /* object header */
-    struct event_sync  *sync;        /* sync object for wait/signal */
+    struct object      *sync;        /* sync object for wait/signal */
     struct fd          *fd;          /* fd owning this lock */
     struct list         fd_entry;    /* entry in list of locks on a given fd */
     struct list         inode_entry; /* entry in inode list of locks */
diff --git a/server/inproc_sync.c b/server/inproc_sync.c
index 5e9a5fd173b..af0b790210b 100644
--- a/server/inproc_sync.c
+++ b/server/inproc_sync.c
@@ -88,7 +88,7 @@ static const struct object_ops inproc_sync_ops =
     inproc_sync_destroy,        /* destroy */
 };
 
-struct inproc_sync *create_inproc_internal_sync( int manual, int signaled )
+struct object *create_inproc_internal_sync( int manual, int signaled )
 {
     struct ntsync_event_args args = {.signaled = signaled, .manual = manual};
     struct inproc_sync *event;
@@ -103,7 +103,7 @@ struct inproc_sync *create_inproc_internal_sync( int manual, int signaled )
         release_object( event );
         return NULL;
     }
-    return event;
+    return &event->obj;
 }
 
 static void inproc_sync_dump( struct object *obj, int verbose )
@@ -141,18 +141,6 @@ static int inproc_sync_signal( struct object *obj, int signal )
     return 1;
 }
 
-void signal_inproc_sync( struct inproc_sync *sync )
-{
-    assert( sync->obj.ops->signal );
-    sync->obj.ops->signal( &sync->obj, 1 );
-}
-
-void reset_inproc_sync( struct inproc_sync *sync )
-{
-    assert( sync->obj.ops->signal );
-    sync->obj.ops->signal( &sync->obj, 0 );
-}
-
 static void inproc_sync_destroy( struct object *obj )
 {
     struct inproc_sync *sync = (struct inproc_sync *)obj;
@@ -184,19 +172,11 @@ int get_inproc_device_fd(void)
     return -1;
 }
 
-struct inproc_sync *create_inproc_internal_sync( int manual, int signaled )
+struct object *create_inproc_internal_sync( int manual, int signaled )
 {
     return NULL;
 }
 
-void signal_inproc_sync( struct inproc_sync *sync )
-{
-}
-
-void reset_inproc_sync( struct inproc_sync *sync )
-{
-}
-
 int get_inproc_sync_fd( struct object *obj, int *type )
 {
     return -1;
diff --git a/server/mutex.c b/server/mutex.c
index 88448870ba5..1f3ccd846e4 100644
--- a/server/mutex.c
+++ b/server/mutex.c
@@ -162,7 +162,7 @@ static int mutex_sync_signal( struct object *obj, int signal )
     return do_release( mutex, current, 1 );
 }
 
-static struct mutex_sync *create_mutex_sync( int owned )
+static struct object *create_mutex_sync( int owned )
 {
     struct mutex_sync *mutex;
 
@@ -172,13 +172,13 @@ static struct mutex_sync *create_mutex_sync( int owned )
     mutex->abandoned = 0;
     if (owned) do_grab( mutex, current );
 
-    return mutex;
+    return &mutex->obj;
 }
 
 struct mutex
 {
     struct object       obj;             /* object header */
-    struct mutex_sync  *sync;            /* mutex sync object */
+    struct object      *sync;            /* mutex sync object */
 };
 
 static void mutex_dump( struct object *obj, int verbose );
@@ -249,7 +249,7 @@ static void mutex_dump( struct object *obj, int verbose )
 {
     struct mutex *mutex = (struct mutex *)obj;
     assert( obj->ops == &mutex_ops );
-    mutex->sync->obj.ops->dump( &mutex->sync->obj, verbose );
+    mutex->sync->ops->dump( mutex->sync, verbose );
 }
 
 static struct object *mutex_get_sync( struct object *obj )
@@ -307,8 +307,11 @@ DECL_HANDLER(release_mutex)
     if ((mutex = (struct mutex *)get_handle_obj( current->process, req->handle,
                                                  0, &mutex_ops )))
     {
-        reply->prev_count = mutex->sync->count;
-        do_release( mutex->sync, current, 1 );
+        struct mutex_sync *sync = (struct mutex_sync *)mutex->sync;
+        assert( mutex->sync->ops == &mutex_sync_ops );
+
+        reply->prev_count = sync->count;
+        do_release( sync, current, 1 );
         release_object( mutex );
     }
 }
@@ -321,9 +324,12 @@ DECL_HANDLER(query_mutex)
     if ((mutex = (struct mutex *)get_handle_obj( current->process, req->handle,
                                                  MUTANT_QUERY_STATE, &mutex_ops )))
     {
-        reply->count = mutex->sync->count;
-        reply->owned = (mutex->sync->owner == current);
-        reply->abandoned = mutex->sync->abandoned;
+        struct mutex_sync *sync = (struct mutex_sync *)mutex->sync;
+        assert( mutex->sync->ops == &mutex_sync_ops );
+
+        reply->count = sync->count;
+        reply->owned = (sync->owner == current);
+        reply->abandoned = sync->abandoned;
 
         release_object( mutex );
     }
diff --git a/server/object.h b/server/object.h
index 509bacbff4e..05254593b37 100644
--- a/server/object.h
+++ b/server/object.h
@@ -218,13 +218,12 @@ static inline void *mem_append( void *ptr, const void *src, data_size_t len )
 
 /* event functions */
 
-struct event_sync;
 struct event;
 struct keyed_event;
 
-extern struct event_sync *create_event_sync( int manual, int signaled );
-extern void signal_sync( struct event_sync *sync );
-extern void reset_sync( struct event_sync *sync );
+extern struct object *create_event_sync( int manual, int signaled );
+extern void signal_sync( struct object *sync );
+extern void reset_sync( struct object *sync );
 
 extern struct event *create_event( struct object *root, const struct unicode_str *name,
                                    unsigned int attr, int manual_reset, int initial_state,
@@ -242,11 +241,8 @@ extern void abandon_mutexes( struct thread *thread );
 
 /* in-process synchronization functions */
 
-struct inproc_sync;
 extern int get_inproc_device_fd(void);
-extern struct inproc_sync *create_inproc_internal_sync( int manual, int signaled );
-extern void signal_inproc_sync( struct inproc_sync *sync );
-extern void reset_inproc_sync( struct inproc_sync *sync );
+extern struct object *create_inproc_internal_sync( int manual, int signaled );
 extern int get_inproc_sync_fd( struct object *obj, int *type );
 
 /* serial functions */
diff --git a/server/process.c b/server/process.c
index d34a1af8acc..e506b6913a5 100644
--- a/server/process.c
+++ b/server/process.c
@@ -140,7 +140,7 @@ static const struct fd_ops process_fd_ops =
 struct startup_info
 {
     struct object               obj;            /* object header */
-    struct event_sync          *sync;           /* sync object for wait/signal */
+    struct object              *sync;           /* sync object for wait/signal */
     struct process             *process;        /* created process */
     data_size_t                 info_size;      /* size of startup info */
     data_size_t                 data_size;      /* size of whole startup data */
@@ -200,7 +200,7 @@ static void job_destroy( struct object *obj );
 struct job
 {
     struct object        obj;               /* object header */
-    struct event_sync   *sync;              /* sync object for wait/signal */
+    struct object       *sync;              /* sync object for wait/signal */
     struct list          process_list;      /* list of processes */
     int                  num_processes;     /* count of running processes */
     int                  total_processes;   /* count of processes which have been assigned */
diff --git a/server/process.h b/server/process.h
index 619e4894d1d..f7188627abc 100644
--- a/server/process.h
+++ b/server/process.h
@@ -36,7 +36,7 @@ enum startup_state { STARTUP_IN_PROGRESS, STARTUP_DONE, STARTUP_ABORTED };
 struct process
 {
     struct object        obj;             /* object header */
-    struct event_sync   *sync;            /* sync object for wait/signal */
+    struct object       *sync;            /* sync object for wait/signal */
     struct list          entry;           /* entry in system-wide process list */
     process_id_t         parent_id;       /* parent process id (at the time of creation) */
     struct list          thread_list;     /* thread list */
diff --git a/server/queue.c b/server/queue.c
index 54ab3abf112..b9e8c895023 100644
--- a/server/queue.c
+++ b/server/queue.c
@@ -116,7 +116,7 @@ struct msg_queue
 {
     struct object          obj;             /* object header */
     struct fd             *fd;              /* optional file descriptor to poll */
-    struct inproc_sync    *inproc_sync;     /* inproc sync for client-side waits */
+    struct object         *inproc_sync;     /* inproc sync for client-side waits */
     int                    signaled;        /* queue is signaled from fd POLLIN or masks */
     int                    paint_count;     /* pending paint messages count */
     int                    hotkey_count;    /* pending hotkey messages count */
@@ -326,7 +326,7 @@ static struct msg_queue *create_msg_queue( struct thread *thread, struct thread_
         list_init( &queue->expired_timers );
         for (i = 0; i < NB_MSG_KINDS; i++) list_init( &queue->msg_list[i] );
 
-        if (thread->queue_sync) queue->inproc_sync = (struct inproc_sync *)grab_object( thread->queue_sync );
+        if (thread->queue_sync) queue->inproc_sync = grab_object( thread->queue_sync );
         if (!(queue->shared = alloc_shared_object())) goto error;
 
         SHARED_WRITE_BEGIN( queue->shared, queue_shm_t )
@@ -718,13 +718,13 @@ static void signal_queue_sync( struct msg_queue *queue )
     if (queue->signaled) return;
     queue->signaled = 1;
     wake_up( &queue->obj, 0 );
-    if (queue->inproc_sync) signal_inproc_sync( queue->inproc_sync );
+    if (queue->inproc_sync) signal_sync( queue->inproc_sync );
 }
 
 static void reset_queue_sync( struct msg_queue *queue )
 {
     queue->signaled = 0;
-    if (queue->inproc_sync) reset_inproc_sync( queue->inproc_sync );
+    if (queue->inproc_sync) reset_sync( queue->inproc_sync );
 }
 
 /* check the queue status */
diff --git a/server/semaphore.c b/server/semaphore.c
index 607eae929a9..91dfaced21e 100644
--- a/server/semaphore.c
+++ b/server/semaphore.c
@@ -139,20 +139,20 @@ static int semaphore_sync_signal( struct object *obj, int signal )
     return release_semaphore( sem, 1, NULL );
 }
 
-static struct semaphore_sync *create_semaphore_sync( unsigned int initial, unsigned int max )
+static struct object *create_semaphore_sync( unsigned int initial, unsigned int max )
 {
     struct semaphore_sync *sem;
 
     if (!(sem = alloc_object( &semaphore_sync_ops ))) return NULL;
     sem->count = initial;
     sem->max   = max;
-    return sem;
+    return &sem->obj;
 }
 
 struct semaphore
 {
     struct object          obj;    /* object header */
-    struct semaphore_sync *sync;   /* semaphore sync object */
+    struct object         *sync;   /* semaphore sync object */
 };
 
 static void semaphore_dump( struct object *obj, int verbose );
@@ -216,7 +216,7 @@ static void semaphore_dump( struct object *obj, int verbose )
 {
     struct semaphore *sem = (struct semaphore *)obj;
     assert( obj->ops == &semaphore_ops );
-    sem->sync->obj.ops->dump( &sem->sync->obj, verbose );
+    sem->sync->ops->dump( sem->sync, verbose );
 }
 
 static struct object *semaphore_get_sync( struct object *obj )
@@ -274,7 +274,10 @@ DECL_HANDLER(release_semaphore)
     if ((sem = (struct semaphore *)get_handle_obj( current->process, req->handle,
                                                    SEMAPHORE_MODIFY_STATE, &semaphore_ops )))
     {
-        release_semaphore( sem->sync, req->count, &reply->prev_count );
+        struct semaphore_sync *sync = (struct semaphore_sync *)sem->sync;
+        assert( sem->sync->ops == &semaphore_sync_ops );
+
+        release_semaphore( sync, req->count, &reply->prev_count );
         release_object( sem );
     }
 }
@@ -287,8 +290,11 @@ DECL_HANDLER(query_semaphore)
     if ((sem = (struct semaphore *)get_handle_obj( current->process, req->handle,
                                                    SEMAPHORE_QUERY_STATE, &semaphore_ops )))
     {
-        reply->current = sem->sync->count;
-        reply->max = sem->sync->max;
+        struct semaphore_sync *sync = (struct semaphore_sync *)sem->sync;
+        assert( sem->sync->ops == &semaphore_sync_ops );
+
+        reply->current = sync->count;
+        reply->max = sync->max;
         release_object( sem );
     }
 }
diff --git a/server/thread.c b/server/thread.c
index 5975c517bfc..61c4ca4040d 100644
--- a/server/thread.c
+++ b/server/thread.c
@@ -85,7 +85,7 @@ struct thread_wait
 struct thread_apc
 {
     struct object       obj;      /* object header */
-    struct event_sync  *sync;     /* sync object for wait/signal */
+    struct object      *sync;     /* sync object for wait/signal */
     struct list         entry;    /* queue linked list */
     struct thread      *caller;   /* thread that queued this apc */
     struct object      *owner;    /* object that queued this apc */
@@ -131,7 +131,7 @@ static const struct object_ops thread_apc_ops =
 struct context
 {
     struct object           obj;        /* object header */
-    struct event_sync      *sync;       /* sync object for wait/signal */
+    struct object          *sync;       /* sync object for wait/signal */
     unsigned int            status;     /* status of the context */
     struct context_data     regs[2];    /* context data */
 };
@@ -1037,6 +1037,18 @@ static int object_sync_signaled( struct object *obj, struct wait_queue_entry *en
     return ret;
 }
 
+void signal_sync( struct object *obj )
+{
+    assert( obj->ops->signal );
+    obj->ops->signal( obj, 1 );
+}
+
+void reset_sync( struct object *obj )
+{
+    assert( obj->ops->signal );
+    obj->ops->signal( obj, 0 );
+}
+
 static int object_sync_signal( struct object *obj )
 {
     struct object *sync = get_obj_sync( obj );
@@ -1469,7 +1481,7 @@ static int queue_apc( struct process *process, struct thread *thread, struct thr
     if (!list_prev( queue, &apc->entry ))  /* first one */
     {
         if (apc->call.type == APC_USER && thread->alert_sync)
-            signal_inproc_sync( thread->alert_sync );
+            signal_sync( thread->alert_sync );
         wake_thread( thread );
     }
 
@@ -1504,7 +1516,7 @@ void thread_cancel_apc( struct thread *thread, struct object *owner, enum apc_ty
         signal_sync( apc->sync );
         release_object( apc );
         if (list_empty( &thread->user_apc ) && thread->alert_sync)
-            reset_inproc_sync( thread->alert_sync );
+            reset_sync( thread->alert_sync );
         return;
     }
 }
@@ -1520,7 +1532,7 @@ static struct thread_apc *thread_dequeue_apc( struct thread *thread, int system
         apc = LIST_ENTRY( ptr, struct thread_apc, entry );
         list_remove( ptr );
         if (list_empty( &thread->user_apc ) && thread->alert_sync)
-            reset_inproc_sync( thread->alert_sync );
+            reset_sync( thread->alert_sync );
     }
     return apc;
 }
@@ -1703,12 +1715,12 @@ DECL_HANDLER(new_thread)
         {
             if (request_fd != -1) /* first thread fds will be sent in init_first_thread */
             {
-                if (thread->queue_sync && (fd = get_inproc_sync_fd( (struct object *)thread->queue_sync, &type )) >= 0)
+                if (thread->queue_sync && (fd = get_inproc_sync_fd( thread->queue_sync, &type )) >= 0)
                 {
                     reply->queue_handle = get_thread_id( thread ) | 1;
                     send_client_fd( thread->process, fd, reply->queue_handle );
                 }
-                if (thread->alert_sync && (fd = get_inproc_sync_fd( (struct object *)thread->alert_sync, &type )) >= 0)
+                if (thread->alert_sync && (fd = get_inproc_sync_fd( thread->alert_sync, &type )) >= 0)
                 {
                     reply->alert_handle = get_thread_id( thread ) | 2;
                     send_client_fd( thread->process, fd, reply->alert_handle );
@@ -1787,12 +1799,12 @@ DECL_HANDLER(init_first_thread)
         reply->inproc_device = get_process_id( process ) | 1;
         send_client_fd( process, fd, reply->inproc_device );
     }
-    if (current->queue_sync && (fd = get_inproc_sync_fd( (struct object *)current->queue_sync, &type )) >= 0)
+    if (current->queue_sync && (fd = get_inproc_sync_fd( current->queue_sync, &type )) >= 0)
     {
         reply->queue_handle = get_thread_id( current ) | 1;
         send_client_fd( process, fd, reply->queue_handle );
     }
-    if (current->alert_sync && (fd = get_inproc_sync_fd( (struct object *)current->alert_sync, &type )) >= 0)
+    if (current->alert_sync && (fd = get_inproc_sync_fd( current->alert_sync, &type )) >= 0)
     {
         reply->alert_handle = get_thread_id( current ) | 2;
         send_client_fd( process, fd, reply->alert_handle );
diff --git a/server/thread.h b/server/thread.h
index b10ff82690d..e788e5d02e1 100644
--- a/server/thread.h
+++ b/server/thread.h
@@ -50,9 +50,9 @@ struct inflight_fd
 struct thread
 {
     struct object          obj;           /* object header */
-    struct event_sync     *sync;          /* sync object for wait/signal */
-    struct inproc_sync    *alert_sync;    /* inproc sync for user apc alerts */
-    struct inproc_sync    *queue_sync;    /* inproc sync for message queue */
+    struct object         *sync;          /* sync object for wait/signal */
+    struct object         *alert_sync;    /* inproc sync for user apc alerts */
+    struct object         *queue_sync;    /* inproc sync for message queue */
     struct list            entry;         /* entry in system-wide thread list */
     struct list            proc_entry;    /* entry in per-process thread list */
     struct list            desktop_entry; /* entry in per-desktop thread list */
diff --git a/server/timer.c b/server/timer.c
index 4d2adf18672..3911db647f3 100644
--- a/server/timer.c
+++ b/server/timer.c
@@ -53,7 +53,7 @@ struct type_descr timer_type =
 struct timer
 {
     struct object        obj;       /* object header */
-    struct event_sync   *sync;      /* sync object for wait/signal */
+    struct object       *sync;      /* sync object for wait/signal */
     int                  manual;    /* manual reset */
     int                  signaled;  /* current signaled state */
     unsigned int         period;    /* timer period in ms */
-- 
2.51.0


From ad657fc5d3803131d64ae1ac526764f32a679cb2 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Tue, 2 Sep 2025 20:57:32 +0200
Subject: [PATCH 11/16] ntdll: Validate expected inproc sync type in
 get_inproc_sync.

Signed-off-by: Vasiliy Stelmachenok <ventureo@cachyos.org>
---
 dlls/ntdll/unix/sync.c | 79 +++++++++++++++++++++++++++++++++++-------
 server/inproc_sync.c   |  2 +-
 server/protocol.def    |  3 ++
 3 files changed, 71 insertions(+), 13 deletions(-)

diff --git a/dlls/ntdll/unix/sync.c b/dlls/ntdll/unix/sync.c
index e72067056b4..f0776297d00 100644
--- a/dlls/ntdll/unix/sync.c
+++ b/dlls/ntdll/unix/sync.c
@@ -322,7 +322,8 @@ static void release_inproc_sync( struct inproc_sync *sync )
     if (!ref) close( sync->fd );
 }
 
-static NTSTATUS get_inproc_sync( HANDLE handle, ACCESS_MASK desired_access, struct inproc_sync *sync )
+static NTSTATUS get_inproc_sync( HANDLE handle, enum inproc_sync_type desired_type, ACCESS_MASK desired_access,
+                                 struct inproc_sync *sync )
 {
     sigset_t sigset;
     NTSTATUS ret;
@@ -350,6 +351,11 @@ static NTSTATUS get_inproc_sync( HANDLE handle, ACCESS_MASK desired_access, stru
     server_leave_uninterrupted_section( &fd_cache_mutex, &sigset );
 
     if (ret) return ret;
+    if (desired_type != INPROC_SYNC_UNKNOWN && desired_type != sync->type)
+    {
+        release_inproc_sync( sync );
+        return STATUS_OBJECT_TYPE_MISMATCH;
+    }
     if ((sync->access & desired_access) != desired_access)
     {
         release_inproc_sync( sync );
@@ -372,6 +378,15 @@ extern NTSTATUS check_signal_access( struct inproc_sync *sync )
     {
     case INPROC_SYNC_INTERNAL:
         return STATUS_OBJECT_TYPE_MISMATCH;
+    case INPROC_SYNC_EVENT:
+        if (!(sync->access & EVENT_MODIFY_STATE)) return STATUS_ACCESS_DENIED;
+        return STATUS_SUCCESS;
+    case INPROC_SYNC_MUTEX:
+        if (!(sync->access & SYNCHRONIZE)) return STATUS_ACCESS_DENIED;
+        return STATUS_SUCCESS;
+    case INPROC_SYNC_SEMAPHORE:
+        if (!(sync->access & SEMAPHORE_MODIFY_STATE)) return STATUS_ACCESS_DENIED;
+        return STATUS_SUCCESS;
     }
 
     assert( 0 );
@@ -400,50 +415,90 @@ static void unselect_queue( BOOL signaled )
 
 static NTSTATUS inproc_release_semaphore( HANDLE handle, ULONG count, ULONG *prev_count )
 {
+    struct inproc_sync stack, *sync = &stack;
+    NTSTATUS ret;
+
     if (inproc_device_fd < 0) return STATUS_NOT_IMPLEMENTED;
-    return STATUS_NOT_IMPLEMENTED;
+    if ((ret = get_inproc_sync( handle, INPROC_SYNC_SEMAPHORE, SEMAPHORE_MODIFY_STATE, &stack ))) return ret;
+    release_inproc_sync( sync );
+    return ret;
 }
 
 static NTSTATUS inproc_query_semaphore( HANDLE handle, SEMAPHORE_BASIC_INFORMATION *info )
 {
+    struct inproc_sync stack, *sync = &stack;
+    NTSTATUS ret;
+
     if (inproc_device_fd < 0) return STATUS_NOT_IMPLEMENTED;
-    return STATUS_NOT_IMPLEMENTED;
+    if ((ret = get_inproc_sync( handle, INPROC_SYNC_SEMAPHORE, SEMAPHORE_QUERY_STATE, &stack ))) return ret;
+    release_inproc_sync( sync );
+    return ret;
 }
 
 static NTSTATUS inproc_set_event( HANDLE handle, LONG *prev_state )
 {
+    struct inproc_sync stack, *sync = &stack;
+    NTSTATUS ret;
+
     if (inproc_device_fd < 0) return STATUS_NOT_IMPLEMENTED;
-    return STATUS_NOT_IMPLEMENTED;
+    if ((ret = get_inproc_sync( handle, INPROC_SYNC_EVENT, EVENT_MODIFY_STATE, sync ))) return ret;
+    release_inproc_sync( sync );
+    return ret;
 }
 
 static NTSTATUS inproc_reset_event( HANDLE handle, LONG *prev_state )
 {
+    struct inproc_sync stack, *sync = &stack;
+    NTSTATUS ret;
+
     if (inproc_device_fd < 0) return STATUS_NOT_IMPLEMENTED;
-    return STATUS_NOT_IMPLEMENTED;
+    if ((ret = get_inproc_sync( handle, INPROC_SYNC_EVENT, EVENT_MODIFY_STATE, sync ))) return ret;
+    release_inproc_sync( sync );
+    return ret;
 }
 
 static NTSTATUS inproc_pulse_event( HANDLE handle, LONG *prev_state )
 {
+    struct inproc_sync stack, *sync = &stack;
+    NTSTATUS ret;
+
     if (inproc_device_fd < 0) return STATUS_NOT_IMPLEMENTED;
-    return STATUS_NOT_IMPLEMENTED;
+    if ((ret = get_inproc_sync( handle, INPROC_SYNC_EVENT, EVENT_MODIFY_STATE, sync ))) return ret;
+    release_inproc_sync( sync );
+    return ret;
 }
 
 static NTSTATUS inproc_query_event( HANDLE handle, EVENT_BASIC_INFORMATION *info )
 {
+    struct inproc_sync stack, *sync = &stack;
+    NTSTATUS ret;
+
     if (inproc_device_fd < 0) return STATUS_NOT_IMPLEMENTED;
-    return STATUS_NOT_IMPLEMENTED;
+    if ((ret = get_inproc_sync( handle, INPROC_SYNC_EVENT, EVENT_QUERY_STATE, sync ))) return ret;
+    release_inproc_sync( sync );
+    return ret;
 }
 
 static NTSTATUS inproc_release_mutex( HANDLE handle, LONG *prev_count )
 {
+    struct inproc_sync stack, *sync = &stack;
+    NTSTATUS ret;
+
     if (inproc_device_fd < 0) return STATUS_NOT_IMPLEMENTED;
-    return STATUS_NOT_IMPLEMENTED;
+    if ((ret = get_inproc_sync( handle, INPROC_SYNC_MUTEX, 0, &stack ))) return ret;
+    release_inproc_sync( sync );
+    return ret;
 }
 
 static NTSTATUS inproc_query_mutex( HANDLE handle, MUTANT_BASIC_INFORMATION *info )
 {
+    struct inproc_sync stack, *sync = &stack;
+    NTSTATUS ret;
+
     if (inproc_device_fd < 0) return STATUS_NOT_IMPLEMENTED;
-    return STATUS_NOT_IMPLEMENTED;
+    if ((ret = get_inproc_sync( handle, INPROC_SYNC_MUTEX, MUTANT_QUERY_STATE, &stack ))) return ret;
+    release_inproc_sync( sync );
+    return ret;
 }
 
 static NTSTATUS inproc_wait( DWORD count, const HANDLE *handles, BOOLEAN wait_any,
@@ -460,7 +515,7 @@ static NTSTATUS inproc_wait( DWORD count, const HANDLE *handles, BOOLEAN wait_an
     for (int i = 0; i < count; ++i)
     {
         if (server_queue && handles[i] == server_queue && !get_inproc_queue_sync( stack + i )) queue = i;
-        else if ((ret = get_inproc_sync( handles[i], SYNCHRONIZE, stack + i )))
+        else if ((ret = get_inproc_sync( handles[i], INPROC_SYNC_UNKNOWN, SYNCHRONIZE, stack + i )))
         {
             while (i--) release_inproc_sync( syncs[i] );
             return ret;
@@ -485,7 +540,7 @@ static NTSTATUS inproc_signal_and_wait( HANDLE signal, HANDLE wait,
 
     if (inproc_device_fd < 0) return STATUS_NOT_IMPLEMENTED;
 
-    if ((ret = get_inproc_sync( signal, 0, signal_sync ))) return ret;
+    if ((ret = get_inproc_sync( signal, INPROC_SYNC_UNKNOWN, 0, signal_sync ))) return ret;
     if ((ret = check_signal_access( signal_sync )))
     {
         release_inproc_sync( signal_sync );
@@ -493,7 +548,7 @@ static NTSTATUS inproc_signal_and_wait( HANDLE signal, HANDLE wait,
     }
 
     if (server_queue && wait == server_queue) get_inproc_queue_sync( wait_sync );
-    else if ((ret = get_inproc_sync( wait, SYNCHRONIZE, wait_sync )))
+    else if ((ret = get_inproc_sync( wait, INPROC_SYNC_UNKNOWN, SYNCHRONIZE, wait_sync )))
     {
         release_inproc_sync( signal_sync );
         return ret;
diff --git a/server/inproc_sync.c b/server/inproc_sync.c
index af0b790210b..9fd24e1ef9a 100644
--- a/server/inproc_sync.c
+++ b/server/inproc_sync.c
@@ -132,7 +132,7 @@ static int inproc_sync_signal( struct object *obj, int signal )
     struct inproc_sync *sync = (struct inproc_sync *)obj;
 
     assert( obj->ops == &inproc_sync_ops );
-    assert( sync->type == INPROC_SYNC_INTERNAL );
+    assert( sync->type == INPROC_SYNC_INTERNAL || sync->type == INPROC_SYNC_EVENT );
     assert( signal == 0 || signal == 1 );
 
     if (signal) signal_sync_fd( sync );
diff --git a/server/protocol.def b/server/protocol.def
index e77fd72e890..6500cb5aa6a 100644
--- a/server/protocol.def
+++ b/server/protocol.def
@@ -4143,6 +4143,9 @@ enum inproc_sync_type
 {
     INPROC_SYNC_UNKNOWN   = 0,
     INPROC_SYNC_INTERNAL  = 1,
+    INPROC_SYNC_EVENT     = 2,
+    INPROC_SYNC_MUTEX     = 3,
+    INPROC_SYNC_SEMAPHORE = 4,
 };
 
 /* Get the in-process synchronization fd associated with the waitable handle */
-- 
2.51.0


From 2ec415f9854d025c20e553527adb611c28069d6d Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Thu, 4 Sep 2025 23:20:40 +0200
Subject: [PATCH 12/16] server: Use a separate helper to create internal event
 syncs.

Signed-off-by: Vasiliy Stelmachenok <ventureo@cachyos.org>
---
 server/completion.c | 2 +-
 server/console.c    | 4 ++--
 server/debugger.c   | 4 ++--
 server/device.c     | 2 +-
 server/event.c      | 7 ++++++-
 server/fd.c         | 6 +++---
 server/object.h     | 2 +-
 server/process.c    | 6 +++---
 server/thread.c     | 6 +++---
 server/timer.c      | 2 +-
 10 files changed, 23 insertions(+), 18 deletions(-)

diff --git a/server/completion.c b/server/completion.c
index 3180222b14b..b0f413fa118 100644
--- a/server/completion.c
+++ b/server/completion.c
@@ -279,7 +279,7 @@ static struct completion *create_completion( struct object *root, const struct u
             list_init( &completion->wait_queue );
             completion->depth = 0;
 
-            if (!(completion->sync = create_event_sync( 1, 0 )))
+            if (!(completion->sync = create_internal_sync( 1, 0 )))
             {
                 release_object( completion );
                 return NULL;
diff --git a/server/console.c b/server/console.c
index 809a77cfa67..7987eb9382e 100644
--- a/server/console.c
+++ b/server/console.c
@@ -554,7 +554,7 @@ static struct object *create_console(void)
     init_async_queue( &console->ioctl_q );
     init_async_queue( &console->read_q );
 
-    if (!(console->sync = create_event_sync( 1, 0 ))) goto error;
+    if (!(console->sync = create_internal_sync( 1, 0 ))) goto error;
     if (!(console->fd = alloc_pseudo_fd( &console_fd_ops, &console->obj, FILE_SYNCHRONOUS_IO_NONALERT ))) goto error;
     allow_fd_caching( console->fd );
     return &console->obj;
@@ -977,7 +977,7 @@ static struct object *create_console_server( void )
     list_init( &server->queue );
     list_init( &server->read_queue );
 
-    if (!(server->sync = create_event_sync( 1, 1 ))) goto error;
+    if (!(server->sync = create_internal_sync( 1, 1 ))) goto error;
     if (!(server->fd = alloc_pseudo_fd( &console_server_fd_ops, &server->obj, FILE_SYNCHRONOUS_IO_NONALERT ))) goto error;
     allow_fd_caching(server->fd);
     return &server->obj;
diff --git a/server/debugger.c b/server/debugger.c
index 7c48355408b..7a060ef65a8 100644
--- a/server/debugger.c
+++ b/server/debugger.c
@@ -372,7 +372,7 @@ static struct debug_obj *create_debug_obj( struct object *root, const struct uni
             debug_obj->flags = flags;
             list_init( &debug_obj->event_queue );
 
-            if (!(debug_obj->sync = create_event_sync( 1, 0 )))
+            if (!(debug_obj->sync = create_internal_sync( 1, 0 )))
             {
                 release_object( debug_obj );
                 return NULL;
@@ -451,7 +451,7 @@ static struct debug_event *alloc_debug_event( struct thread *thread, int code, c
     fill_debug_event[code - DbgCreateThreadStateChange]( event, arg );
     event->data.code = code;
 
-    if (!(event->sync = create_event_sync( 1, 0 )))
+    if (!(event->sync = create_internal_sync( 1, 0 )))
     {
         release_object( event );
         return NULL;
diff --git a/server/device.c b/server/device.c
index 0ff5ef676c4..0d519139e75 100644
--- a/server/device.c
+++ b/server/device.c
@@ -848,7 +848,7 @@ static struct device_manager *create_device_manager(void)
         list_init( &manager->requests );
         wine_rb_init( &manager->kernel_objects, compare_kernel_object );
 
-        if (!(manager->sync = create_event_sync( 1, 0 )))
+        if (!(manager->sync = create_internal_sync( 1, 0 )))
         {
             release_object( manager );
             return NULL;
diff --git a/server/event.c b/server/event.c
index 5f6802c68e6..8553244603e 100644
--- a/server/event.c
+++ b/server/event.c
@@ -88,7 +88,7 @@ static const struct object_ops event_sync_ops =
     no_destroy                 /* destroy */
 };
 
-struct object *create_event_sync( int manual, int signaled )
+static struct object *create_event_sync( int manual, int signaled )
 {
     struct event_sync *event;
 
@@ -99,6 +99,11 @@ struct object *create_event_sync( int manual, int signaled )
     return &event->obj;
 }
 
+struct object *create_internal_sync( int manual, int signaled )
+{
+    return create_event_sync( manual, signaled );
+}
+
 static void event_sync_dump( struct object *obj, int verbose )
 {
     struct event_sync *event = (struct event_sync *)obj;
diff --git a/server/fd.c b/server/fd.c
index 34da01de406..49d7c7de75f 100644
--- a/server/fd.c
+++ b/server/fd.c
@@ -1441,7 +1441,7 @@ static struct file_lock *add_lock( struct fd *fd, int shared, file_pos_t start,
     lock->fd      = fd;
     lock->process = current->process;
 
-    if (!(lock->sync = create_event_sync( 1, 0 ))) goto error;
+    if (!(lock->sync = create_internal_sync( 1, 0 ))) goto error;
     /* now try to set a Unix lock */
     if (!set_unix_lock( lock->fd, lock->start, lock->end, lock->shared ? F_RDLCK : F_WRLCK )) goto error;
     list_add_tail( &fd->locks, &lock->fd_entry );
@@ -1724,7 +1724,7 @@ static struct fd *alloc_fd_object(void)
     list_init( &fd->inode_entry );
     list_init( &fd->locks );
 
-    if (!(fd->sync = create_event_sync( 1, 1 ))) goto error;
+    if (!(fd->sync = create_internal_sync( 1, 1 ))) goto error;
     if ((fd->poll_index = add_poll_user( fd )) == -1) goto error;
 
     return fd;
@@ -1767,7 +1767,7 @@ struct fd *alloc_pseudo_fd( const struct fd_ops *fd_user_ops, struct object *use
     list_init( &fd->inode_entry );
     list_init( &fd->locks );
 
-    if (!(fd->sync = create_event_sync( 1, 1 )))
+    if (!(fd->sync = create_internal_sync( 1, 1 )))
     {
         release_object( fd );
         return NULL;
diff --git a/server/object.h b/server/object.h
index 05254593b37..6d64ec4d97d 100644
--- a/server/object.h
+++ b/server/object.h
@@ -221,7 +221,7 @@ static inline void *mem_append( void *ptr, const void *src, data_size_t len )
 struct event;
 struct keyed_event;
 
-extern struct object *create_event_sync( int manual, int signaled );
+extern struct object *create_internal_sync( int manual, int signaled );
 extern void signal_sync( struct object *sync );
 extern void reset_sync( struct object *sync );
 
diff --git a/server/process.c b/server/process.c
index e506b6913a5..afdde4f5b23 100644
--- a/server/process.c
+++ b/server/process.c
@@ -259,7 +259,7 @@ static struct job *create_job_object( struct object *root, const struct unicode_
             job->completion_key = 0;
             job->parent = NULL;
 
-            if (!(job->sync = create_event_sync( 1, 0 )))
+            if (!(job->sync = create_internal_sync( 1, 0 )))
             {
                 release_object( job );
                 return NULL;
@@ -722,7 +722,7 @@ struct process *create_process( int fd, struct process *parent, unsigned int fla
         goto error;
     }
     if (!(process->msg_fd = create_anonymous_fd( &process_fd_ops, fd, &process->obj, 0 ))) goto error;
-    if (!(process->sync = create_event_sync( 1, 0 ))) goto error;
+    if (!(process->sync = create_internal_sync( 1, 0 ))) goto error;
 
     /* create the handle table */
     if (!parent)
@@ -1222,7 +1222,7 @@ DECL_HANDLER(new_process)
     info->process  = NULL;
     info->data     = NULL;
 
-    if (!(info->sync = create_event_sync( 1, 0 )))
+    if (!(info->sync = create_internal_sync( 1, 0 )))
     {
         close( socket_fd );
         goto done;
diff --git a/server/thread.c b/server/thread.c
index 61c4ca4040d..b8e24922ef1 100644
--- a/server/thread.c
+++ b/server/thread.c
@@ -488,7 +488,7 @@ static struct context *create_thread_context( struct thread *thread )
     memset( &context->regs, 0, sizeof(context->regs) );
     context->regs[CTX_NATIVE].machine = native_machine;
 
-    if (!(context->sync = create_event_sync( 1, 0 )))
+    if (!(context->sync = create_internal_sync( 1, 0 )))
     {
         release_object( context );
         return NULL;
@@ -561,7 +561,7 @@ struct thread *create_thread( int fd, struct process *process, const struct secu
         return NULL;
     }
     if (!(thread->request_fd = create_anonymous_fd( &thread_fd_ops, fd, &thread->obj, 0 ))) goto error;
-    if (!(thread->sync = create_event_sync( 1, 0 ))) goto error;
+    if (!(thread->sync = create_internal_sync( 1, 0 ))) goto error;
     if (get_inproc_device_fd() >= 0)
     {
         if (!(thread->alert_sync = create_inproc_internal_sync( 1, 0 ))) goto error;
@@ -740,7 +740,7 @@ static struct thread_apc *create_apc( struct object *owner, const union apc_call
         apc->result.type = APC_NONE;
         if (owner) grab_object( owner );
 
-        if (!(apc->sync = create_event_sync( 1, 0 )))
+        if (!(apc->sync = create_internal_sync( 1, 0 )))
         {
             release_object( apc );
             return NULL;
diff --git a/server/timer.c b/server/timer.c
index 3911db647f3..481beeccdd4 100644
--- a/server/timer.c
+++ b/server/timer.c
@@ -113,7 +113,7 @@ static struct timer *create_timer( struct object *root, const struct unicode_str
             timer->timeout  = NULL;
             timer->thread   = NULL;
 
-            if (!(timer->sync = create_event_sync( manual, 0 )))
+            if (!(timer->sync = create_internal_sync( manual, 0 )))
             {
                 release_object( timer );
                 return NULL;
-- 
2.51.0


From 0a1890d1817aef63f554c79109ab30fccf5088e0 Mon Sep 17 00:00:00 2001
From: Elizabeth Figura <zfigura@codeweavers.com>
Date: Tue, 2 Sep 2025 01:02:42 +0200
Subject: [PATCH 13/16] ntdll: Use in-process synchronization objects.

Signed-off-by: Vasiliy Stelmachenok <ventureo@cachyos.org>
---
 dlls/ntdll/unix/sync.c         | 231 +++++++++++++++++++++++++++++++--
 dlls/ntdll/unix/unix_private.h |   1 +
 server/event.c                 |  12 +-
 server/inproc_sync.c           |  74 +++++++++++
 server/mutex.c                 |   4 +
 server/object.h                |   4 +
 server/semaphore.c             |   2 +
 7 files changed, 319 insertions(+), 9 deletions(-)

diff --git a/dlls/ntdll/unix/sync.c b/dlls/ntdll/unix/sync.c
index f0776297d00..630b2199443 100644
--- a/dlls/ntdll/unix/sync.c
+++ b/dlls/ntdll/unix/sync.c
@@ -30,9 +30,11 @@
 #include <assert.h>
 #include <errno.h>
 #include <fcntl.h>
+#include <inttypes.h>
 #include <limits.h>
 #include <signal.h>
 #include <sys/types.h>
+#include <sys/ioctl.h>
 #include <sys/mman.h>
 #ifdef HAVE_SYS_SYSCALL_H
 #include <sys/syscall.h>
@@ -48,6 +50,7 @@
 #endif
 #include <string.h>
 #include <stdarg.h>
+#include <stdint.h>
 #include <stdio.h>
 #include <stdlib.h>
 #include <time.h>
@@ -306,6 +309,197 @@ static unsigned int validate_open_object_attributes( const OBJECT_ATTRIBUTES *at
     return STATUS_SUCCESS;
 }
 
+#ifdef NTSYNC_IOC_EVENT_READ
+
+static NTSTATUS linux_release_semaphore_obj( int obj, ULONG count, ULONG *prev_count )
+{
+    if (ioctl( obj, NTSYNC_IOC_SEM_RELEASE, &count ) < 0)
+    {
+        if (errno == EOVERFLOW) return STATUS_SEMAPHORE_LIMIT_EXCEEDED;
+        return errno_to_status( errno );
+    }
+    if (prev_count) *prev_count = count;
+    return STATUS_SUCCESS;
+}
+
+static NTSTATUS linux_query_semaphore_obj( int obj, SEMAPHORE_BASIC_INFORMATION *info )
+{
+    struct ntsync_sem_args args = {0};
+    if (ioctl( obj, NTSYNC_IOC_SEM_READ, &args ) < 0) return errno_to_status( errno );
+    info->CurrentCount = args.count;
+    info->MaximumCount = args.max;
+    return STATUS_SUCCESS;
+}
+
+static NTSTATUS linux_set_event_obj( int obj, LONG *prev_state )
+{
+    __u32 prev;
+    if (ioctl( obj, NTSYNC_IOC_EVENT_SET, &prev ) < 0) return errno_to_status( errno );
+    if (prev_state) *prev_state = prev;
+    return STATUS_SUCCESS;
+}
+
+static NTSTATUS linux_reset_event_obj( int obj, LONG *prev_state )
+{
+    __u32 prev;
+    if (ioctl( obj, NTSYNC_IOC_EVENT_RESET, &prev ) < 0) return errno_to_status( errno );
+    if (prev_state) *prev_state = prev;
+    return STATUS_SUCCESS;
+}
+
+static NTSTATUS linux_pulse_event_obj( int obj, LONG *prev_state )
+{
+    __u32 prev;
+    if (ioctl( obj, NTSYNC_IOC_EVENT_PULSE, &prev ) < 0) return errno_to_status( errno );
+    if (prev_state) *prev_state = prev;
+    return STATUS_SUCCESS;
+}
+
+static NTSTATUS linux_query_event_obj( int obj, enum inproc_sync_type type, EVENT_BASIC_INFORMATION *info )
+{
+    struct ntsync_event_args args = {0};
+    if (ioctl( obj, NTSYNC_IOC_EVENT_READ, &args ) < 0) return errno_to_status( errno );
+    info->EventType = args.manual ? NotificationEvent : SynchronizationEvent;
+    info->EventState = args.signaled;
+    return STATUS_SUCCESS;
+}
+
+static NTSTATUS linux_release_mutex_obj( int obj, LONG *prev_count )
+{
+    struct ntsync_mutex_args args = {.owner = GetCurrentThreadId()};
+    if (ioctl( obj, NTSYNC_IOC_MUTEX_UNLOCK, &args ) < 0)
+    {
+        if (errno == EOVERFLOW) return STATUS_MUTANT_LIMIT_EXCEEDED;
+        if (errno == EPERM) return STATUS_MUTANT_NOT_OWNED;
+        return errno_to_status( errno );
+    }
+    if (prev_count) *prev_count = 1 - args.count;
+    return STATUS_SUCCESS;
+}
+
+static NTSTATUS linux_query_mutex_obj( int obj, MUTANT_BASIC_INFORMATION *info )
+{
+    struct ntsync_mutex_args args = {0};
+    if (ioctl( obj, NTSYNC_IOC_MUTEX_READ, &args ) < 0)
+    {
+        if (errno == EOWNERDEAD)
+        {
+            info->AbandonedState = TRUE;
+            info->OwnedByCaller = FALSE;
+            info->CurrentCount = 1;
+            return STATUS_SUCCESS;
+        }
+        return errno_to_status( errno );
+    }
+    info->AbandonedState = FALSE;
+    info->OwnedByCaller = (args.owner == GetCurrentThreadId());
+    info->CurrentCount = 1 - args.count;
+    return STATUS_SUCCESS;
+}
+
+static NTSTATUS linux_wait_objs( int device, const DWORD count, const int *objs,
+                                 BOOLEAN wait_any, BOOLEAN alertable, const LARGE_INTEGER *timeout )
+{
+    struct ntsync_wait_args args = {0};
+    unsigned long request;
+    struct timespec now;
+    int ret;
+
+    if (!timeout || timeout->QuadPart == TIMEOUT_INFINITE)
+    {
+        args.timeout = ~(__u64)0;
+    }
+    else if (timeout->QuadPart <= 0)
+    {
+        clock_gettime( CLOCK_MONOTONIC, &now );
+        args.timeout = (now.tv_sec * NSECPERSEC) + now.tv_nsec + (-timeout->QuadPart * 100);
+    }
+    else
+    {
+        args.timeout = (timeout->QuadPart * 100) - (SECS_1601_TO_1970 * NSECPERSEC);
+        args.flags |= NTSYNC_WAIT_REALTIME;
+    }
+
+    args.objs = (uintptr_t)objs;
+    args.count = count;
+    args.owner = GetCurrentThreadId();
+    args.index = ~0u;
+
+    if (alertable) args.alert = ntdll_get_thread_data()->alert_sync_fd;
+
+    if (wait_any || count == 1) request = NTSYNC_IOC_WAIT_ANY;
+    else request = NTSYNC_IOC_WAIT_ALL;
+
+    do { ret = ioctl( device, request, &args ); }
+    while (ret < 0 && errno == EINTR);
+
+    if (!ret)
+    {
+        if (args.index == count)
+        {
+            static const LARGE_INTEGER timeout;
+
+            ret = server_wait( NULL, 0, SELECT_INTERRUPTIBLE | SELECT_ALERTABLE, &timeout );
+            assert( ret == STATUS_USER_APC );
+            return ret;
+        }
+
+        return wait_any ? args.index : 0;
+    }
+    if (errno == EOWNERDEAD) return STATUS_ABANDONED + (wait_any ? args.index : 0);
+    if (errno == ETIMEDOUT) return STATUS_TIMEOUT;
+    return errno_to_status( errno );
+}
+
+#else /* NTSYNC_IOC_EVENT_READ */
+
+static NTSTATUS linux_release_semaphore_obj( int obj, ULONG count, ULONG *prev_count )
+{
+    return STATUS_NOT_IMPLEMENTED;
+}
+
+static NTSTATUS linux_query_semaphore_obj( int obj, SEMAPHORE_BASIC_INFORMATION *info )
+{
+    return STATUS_NOT_IMPLEMENTED;
+}
+
+static NTSTATUS linux_set_event_obj( int obj, LONG *prev_state )
+{
+    return STATUS_NOT_IMPLEMENTED;
+}
+
+static NTSTATUS linux_reset_event_obj( int obj, LONG *prev_state )
+{
+    return STATUS_NOT_IMPLEMENTED;
+}
+
+static NTSTATUS linux_pulse_event_obj( int obj, LONG *prev_state )
+{
+    return STATUS_NOT_IMPLEMENTED;
+}
+
+static NTSTATUS linux_query_event_obj( int obj, enum inproc_sync_type type, EVENT_BASIC_INFORMATION *info )
+{
+    return STATUS_NOT_IMPLEMENTED;
+}
+
+static NTSTATUS linux_release_mutex_obj( int obj, LONG *prev_count )
+{
+    return STATUS_NOT_IMPLEMENTED;
+}
+
+static NTSTATUS linux_query_mutex_obj( int obj, MUTANT_BASIC_INFORMATION *info )
+{
+    return STATUS_NOT_IMPLEMENTED;
+}
+
+static NTSTATUS linux_wait_objs( int device, const DWORD count, const int *objs,
+                                 BOOLEAN wait_any, BOOLEAN alertable, const LARGE_INTEGER *timeout )
+{
+    return STATUS_NOT_IMPLEMENTED;
+}
+
+#endif /* NTSYNC_IOC_EVENT_READ */
 
 struct inproc_sync
 {
@@ -420,6 +614,7 @@ static NTSTATUS inproc_release_semaphore( HANDLE handle, ULONG count, ULONG *pre
 
     if (inproc_device_fd < 0) return STATUS_NOT_IMPLEMENTED;
     if ((ret = get_inproc_sync( handle, INPROC_SYNC_SEMAPHORE, SEMAPHORE_MODIFY_STATE, &stack ))) return ret;
+    ret = linux_release_semaphore_obj( sync->fd, count, prev_count );
     release_inproc_sync( sync );
     return ret;
 }
@@ -431,6 +626,7 @@ static NTSTATUS inproc_query_semaphore( HANDLE handle, SEMAPHORE_BASIC_INFORMATI
 
     if (inproc_device_fd < 0) return STATUS_NOT_IMPLEMENTED;
     if ((ret = get_inproc_sync( handle, INPROC_SYNC_SEMAPHORE, SEMAPHORE_QUERY_STATE, &stack ))) return ret;
+    ret = linux_query_semaphore_obj( sync->fd, info );
     release_inproc_sync( sync );
     return ret;
 }
@@ -441,7 +637,8 @@ static NTSTATUS inproc_set_event( HANDLE handle, LONG *prev_state )
     NTSTATUS ret;
 
     if (inproc_device_fd < 0) return STATUS_NOT_IMPLEMENTED;
-    if ((ret = get_inproc_sync( handle, INPROC_SYNC_EVENT, EVENT_MODIFY_STATE, sync ))) return ret;
+    if ((ret = get_inproc_sync( handle, INPROC_SYNC_EVENT, EVENT_MODIFY_STATE, &stack ))) return ret;
+    ret = linux_set_event_obj( sync->fd, prev_state );
     release_inproc_sync( sync );
     return ret;
 }
@@ -452,7 +649,8 @@ static NTSTATUS inproc_reset_event( HANDLE handle, LONG *prev_state )
     NTSTATUS ret;
 
     if (inproc_device_fd < 0) return STATUS_NOT_IMPLEMENTED;
-    if ((ret = get_inproc_sync( handle, INPROC_SYNC_EVENT, EVENT_MODIFY_STATE, sync ))) return ret;
+    if ((ret = get_inproc_sync( handle, INPROC_SYNC_EVENT, EVENT_MODIFY_STATE, &stack ))) return ret;
+    ret = linux_reset_event_obj( sync->fd, prev_state );
     release_inproc_sync( sync );
     return ret;
 }
@@ -463,7 +661,8 @@ static NTSTATUS inproc_pulse_event( HANDLE handle, LONG *prev_state )
     NTSTATUS ret;
 
     if (inproc_device_fd < 0) return STATUS_NOT_IMPLEMENTED;
-    if ((ret = get_inproc_sync( handle, INPROC_SYNC_EVENT, EVENT_MODIFY_STATE, sync ))) return ret;
+    if ((ret = get_inproc_sync( handle, INPROC_SYNC_EVENT, EVENT_MODIFY_STATE, &stack ))) return ret;
+    ret = linux_pulse_event_obj( sync->fd, prev_state );
     release_inproc_sync( sync );
     return ret;
 }
@@ -474,7 +673,8 @@ static NTSTATUS inproc_query_event( HANDLE handle, EVENT_BASIC_INFORMATION *info
     NTSTATUS ret;
 
     if (inproc_device_fd < 0) return STATUS_NOT_IMPLEMENTED;
-    if ((ret = get_inproc_sync( handle, INPROC_SYNC_EVENT, EVENT_QUERY_STATE, sync ))) return ret;
+    if ((ret = get_inproc_sync( handle, INPROC_SYNC_EVENT, EVENT_QUERY_STATE, &stack ))) return ret;
+    ret = linux_query_event_obj( sync->fd, sync->type, info );
     release_inproc_sync( sync );
     return ret;
 }
@@ -486,6 +686,7 @@ static NTSTATUS inproc_release_mutex( HANDLE handle, LONG *prev_count )
 
     if (inproc_device_fd < 0) return STATUS_NOT_IMPLEMENTED;
     if ((ret = get_inproc_sync( handle, INPROC_SYNC_MUTEX, 0, &stack ))) return ret;
+    ret = linux_release_mutex_obj( sync->fd, prev_count );
     release_inproc_sync( sync );
     return ret;
 }
@@ -497,6 +698,7 @@ static NTSTATUS inproc_query_mutex( HANDLE handle, MUTANT_BASIC_INFORMATION *inf
 
     if (inproc_device_fd < 0) return STATUS_NOT_IMPLEMENTED;
     if ((ret = get_inproc_sync( handle, INPROC_SYNC_MUTEX, MUTANT_QUERY_STATE, &stack ))) return ret;
+    ret = linux_query_mutex_obj( sync->fd, info );
     release_inproc_sync( sync );
     return ret;
 }
@@ -506,6 +708,7 @@ static NTSTATUS inproc_wait( DWORD count, const HANDLE *handles, BOOLEAN wait_an
 {
     HANDLE server_queue = UlongToHandle( NtUserGetThreadInfo()->server_queue );
     struct inproc_sync *syncs[64], stack[ARRAY_SIZE(syncs)];
+    int objs[ARRAY_SIZE(syncs)];
     UINT queue = -1;
     NTSTATUS ret;
 
@@ -521,10 +724,11 @@ static NTSTATUS inproc_wait( DWORD count, const HANDLE *handles, BOOLEAN wait_an
             return ret;
         }
         syncs[i] = stack + i;
+        objs[i] = syncs[i]->fd;
     }
 
     if (queue != -1) select_queue();
-    ret = STATUS_NOT_IMPLEMENTED;
+    ret = linux_wait_objs( inproc_device_fd, count, objs, wait_any, alertable, timeout );
     if (queue != -1) unselect_queue( ret == queue );
 
     while (count--) release_inproc_sync( syncs[count] );
@@ -554,9 +758,20 @@ static NTSTATUS inproc_signal_and_wait( HANDLE signal, HANDLE wait,
         return ret;
     }
 
-    if (server_queue && wait == server_queue) select_queue();
-    ret = STATUS_NOT_IMPLEMENTED;
-    if (server_queue && wait == server_queue) unselect_queue( !ret );
+    switch (signal_sync->type)
+    {
+    case INPROC_SYNC_EVENT:     ret = linux_set_event_obj( signal_sync->fd, NULL ); break;
+    case INPROC_SYNC_MUTEX:     ret = linux_release_mutex_obj( signal_sync->fd, NULL ); break;
+    case INPROC_SYNC_SEMAPHORE: ret = linux_release_semaphore_obj( signal_sync->fd, 1, NULL ); break;
+    default: assert( 0 ); break;
+    }
+
+    if (!ret)
+    {
+        if (server_queue && wait == server_queue) select_queue();
+        ret = linux_wait_objs( inproc_device_fd, 1, &wait_sync->fd, TRUE, alertable, timeout );
+        if (server_queue && wait == server_queue) unselect_queue( !ret );
+    }
 
     release_inproc_sync( signal_sync );
     release_inproc_sync( wait_sync );
diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
index b324b2297d7..d783a547850 100644
--- a/dlls/ntdll/unix/unix_private.h
+++ b/dlls/ntdll/unix/unix_private.h
@@ -399,6 +399,7 @@ extern void call_raise_user_exception_dispatcher(void);
 #define IMAGE_DLLCHARACTERISTICS_PREFER_NATIVE 0x0010 /* Wine extension */
 
 #define TICKSPERSEC 10000000
+#define NSECPERSEC 1000000000
 #define SECS_1601_TO_1970  ((369 * 365 + 89) * (ULONGLONG)86400)
 
 static inline ULONGLONG ticks_from_time_t( time_t time )
diff --git a/server/event.c b/server/event.c
index 8553244603e..5f612b3fae0 100644
--- a/server/event.c
+++ b/server/event.c
@@ -92,6 +92,8 @@ static struct object *create_event_sync( int manual, int signaled )
 {
     struct event_sync *event;
 
+    if (get_inproc_device_fd() >= 0) return create_inproc_event_sync( manual, signaled );
+
     if (!(event = alloc_object( &event_sync_ops ))) return NULL;
     event->manual   = manual;
     event->signaled = signaled;
@@ -101,7 +103,15 @@ static struct object *create_event_sync( int manual, int signaled )
 
 struct object *create_internal_sync( int manual, int signaled )
 {
-    return create_event_sync( manual, signaled );
+    struct event_sync *event;
+
+    if (get_inproc_device_fd() >= 0) return create_inproc_internal_sync( manual, signaled );
+
+    if (!(event = alloc_object( &event_sync_ops ))) return NULL;
+    event->manual   = manual;
+    event->signaled = signaled;
+
+    return &event->obj;
 }
 
 static void event_sync_dump( struct object *obj, int verbose )
diff --git a/server/inproc_sync.c b/server/inproc_sync.c
index 9fd24e1ef9a..64a67652af5 100644
--- a/server/inproc_sync.c
+++ b/server/inproc_sync.c
@@ -57,8 +57,11 @@ struct inproc_sync
     struct object          obj;  /* object header */
     enum inproc_sync_type  type;
     int                    fd;
+    struct list            entry;
 };
 
+static struct list inproc_mutexes = LIST_INIT( inproc_mutexes );
+
 static void inproc_sync_dump( struct object *obj, int verbose );
 static int inproc_sync_signal( struct object *obj, int signal );
 static void inproc_sync_destroy( struct object *obj );
@@ -103,9 +106,52 @@ struct object *create_inproc_internal_sync( int manual, int signaled )
         release_object( event );
         return NULL;
     }
+    list_init( &event->entry );
+    return &event->obj;
+}
+
+struct object *create_inproc_event_sync( int manual, int signaled )
+{
+    struct ntsync_event_args args = {.signaled = signaled, .manual = manual};
+    struct inproc_sync *event;
+
+    if (!(event = alloc_object( &inproc_sync_ops ))) return NULL;
+    event->type = INPROC_SYNC_EVENT;
+    event->fd = ioctl( get_inproc_device_fd(), NTSYNC_IOC_CREATE_EVENT, &args );
+    assert( event->fd != -1 );
+    list_init( &event->entry );
+
     return &event->obj;
 }
 
+struct object *create_inproc_mutex_sync( thread_id_t owner, unsigned int count )
+{
+    struct ntsync_mutex_args args = {.owner = owner, .count = count};
+    struct inproc_sync *mutex;
+
+    if (!(mutex = alloc_object( &inproc_sync_ops ))) return NULL;
+    mutex->type = INPROC_SYNC_MUTEX;
+    mutex->fd = ioctl( get_inproc_device_fd(), NTSYNC_IOC_CREATE_MUTEX, &args );
+    assert( mutex->fd != -1 );
+    list_add_tail( &inproc_mutexes, &mutex->entry );
+
+    return &mutex->obj;
+}
+
+struct object *create_inproc_semaphore_sync( unsigned int initial, unsigned int max )
+{
+    struct ntsync_sem_args args = {.count = initial, .max = max};
+    struct inproc_sync *sem;
+
+    if (!(sem = alloc_object( &inproc_sync_ops ))) return NULL;
+    sem->type = INPROC_SYNC_SEMAPHORE;
+    sem->fd = ioctl( get_inproc_device_fd(), NTSYNC_IOC_CREATE_SEM, &args );
+    assert( sem->fd != -1 );
+    list_init( &sem->entry );
+
+    return &sem->obj;
+}
+
 static void inproc_sync_dump( struct object *obj, int verbose )
 {
     struct inproc_sync *sync = (struct inproc_sync *)obj;
@@ -145,9 +191,18 @@ static void inproc_sync_destroy( struct object *obj )
 {
     struct inproc_sync *sync = (struct inproc_sync *)obj;
     assert( obj->ops == &inproc_sync_ops );
+    list_remove( &sync->entry );
     close( sync->fd );
 }
 
+void abandon_inproc_mutexes( thread_id_t tid )
+{
+    struct inproc_sync *mutex;
+
+    LIST_FOR_EACH_ENTRY( mutex, &inproc_mutexes, struct inproc_sync, entry )
+        ioctl( mutex->fd, NTSYNC_IOC_MUTEX_KILL, &tid );
+}
+
 int get_inproc_sync_fd( struct object *obj, int *type )
 {
     struct object *sync;
@@ -177,6 +232,25 @@ struct object *create_inproc_internal_sync( int manual, int signaled )
     return NULL;
 }
 
+struct object *create_inproc_event_sync( int manual, int signaled )
+{
+    return NULL;
+}
+
+struct object *create_inproc_mutex_sync( thread_id_t owner, unsigned int count )
+{
+    return NULL;
+}
+
+struct object *create_inproc_semaphore_sync( unsigned int initial, unsigned int max )
+{
+    return NULL;
+}
+
+void abandon_inproc_mutexes( thread_id_t tid )
+{
+}
+
 int get_inproc_sync_fd( struct object *obj, int *type )
 {
     return -1;
diff --git a/server/mutex.c b/server/mutex.c
index 1f3ccd846e4..0638dd6b5fc 100644
--- a/server/mutex.c
+++ b/server/mutex.c
@@ -166,6 +166,8 @@ static struct object *create_mutex_sync( int owned )
 {
     struct mutex_sync *mutex;
 
+    if (get_inproc_device_fd() >= 0) return create_inproc_mutex_sync( owned ? current->id : 0, owned ? 1 : 0 );
+
     if (!(mutex = alloc_object( &mutex_sync_ops ))) return NULL;
     mutex->count = 0;
     mutex->owner = NULL;
@@ -243,6 +245,8 @@ void abandon_mutexes( struct thread *thread )
         mutex->abandoned = 1;
         do_release( mutex, thread, mutex->count );
     }
+
+    abandon_inproc_mutexes( thread->id );
 }
 
 static void mutex_dump( struct object *obj, int verbose )
diff --git a/server/object.h b/server/object.h
index 6d64ec4d97d..edbed46383c 100644
--- a/server/object.h
+++ b/server/object.h
@@ -243,6 +243,10 @@ extern void abandon_mutexes( struct thread *thread );
 
 extern int get_inproc_device_fd(void);
 extern struct object *create_inproc_internal_sync( int manual, int signaled );
+extern struct object *create_inproc_event_sync( int manual, int signaled );
+extern struct object *create_inproc_semaphore_sync( unsigned int initial, unsigned int max );
+extern struct object *create_inproc_mutex_sync( thread_id_t owner, unsigned int count );
+extern void abandon_inproc_mutexes( thread_id_t owner );
 extern int get_inproc_sync_fd( struct object *obj, int *type );
 
 /* serial functions */
diff --git a/server/semaphore.c b/server/semaphore.c
index 91dfaced21e..8a350c67603 100644
--- a/server/semaphore.c
+++ b/server/semaphore.c
@@ -143,6 +143,8 @@ static struct object *create_semaphore_sync( unsigned int initial, unsigned int
 {
     struct semaphore_sync *sem;
 
+    if (get_inproc_device_fd() >= 0) return create_inproc_semaphore_sync( initial, max );
+
     if (!(sem = alloc_object( &semaphore_sync_ops ))) return NULL;
     sem->count = initial;
     sem->max   = max;
-- 
2.51.0


From 35f833f6b3cea7a856def9dffaa9bf996c87ca3a Mon Sep 17 00:00:00 2001
From: Elizabeth Figura <zfigura@codeweavers.com>
Date: Tue, 20 Apr 2021 17:55:59 -0500
Subject: [PATCH 14/16] ntdll: Use server_wait_for_object() when waiting on
 only the queue object.

Signed-off-by: Vasiliy Stelmachenok <ventureo@cachyos.org>
---
 dlls/ntdll/unix/sync.c | 11 +++++++++++
 1 file changed, 11 insertions(+)

diff --git a/dlls/ntdll/unix/sync.c b/dlls/ntdll/unix/sync.c
index 630b2199443..a14f68f012a 100644
--- a/dlls/ntdll/unix/sync.c
+++ b/dlls/ntdll/unix/sync.c
@@ -727,6 +727,17 @@ static NTSTATUS inproc_wait( DWORD count, const HANDLE *handles, BOOLEAN wait_an
         objs[i] = syncs[i]->fd;
     }
 
+    /* It's common to wait on the message queue alone. Some applications wait
+     * on it in fast paths, with a zero timeout. Since we take two server calls
+     * instead of one when going through inproc_wait(), and since we only need
+     * to go through that path if we're waiting on other objects, just delegate
+     * to the server if we're only waiting on the message queue. */
+    if (count == 1 && queue != -1)
+    {
+        release_inproc_sync( syncs[0] );
+        return server_wait_for_object( handles[0], alertable, timeout );
+    }
+
     if (queue != -1) select_queue();
     ret = linux_wait_objs( inproc_device_fd, count, objs, wait_any, alertable, timeout );
     if (queue != -1) unselect_queue( ret == queue );
-- 
2.51.0


From 1fd4dd339ec97227cc4cfc7c01f7a0f38f728b49 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Tue, 2 Sep 2025 20:59:13 +0200
Subject: [PATCH 15/16] ntdll: Cache in-process synchronization objects.

Signed-off-by: Vasiliy Stelmachenok <ventureo@cachyos.org>
---
 dlls/ntdll/unix/server.c       |  19 ++-
 dlls/ntdll/unix/sync.c         | 237 +++++++++++++++++++++++++++++----
 dlls/ntdll/unix/thread.c       |  11 +-
 dlls/ntdll/unix/unix_private.h |   2 +
 4 files changed, 239 insertions(+), 30 deletions(-)

diff --git a/dlls/ntdll/unix/server.c b/dlls/ntdll/unix/server.c
index f131b919e00..7c31bec2a61 100644
--- a/dlls/ntdll/unix/server.c
+++ b/dlls/ntdll/unix/server.c
@@ -909,15 +909,24 @@ unsigned int server_queue_process_apc( HANDLE process, const union apc_call *cal
         }
         else
         {
+            sigset_t sigset;
+
             NtWaitForSingleObject( handle, FALSE, NULL );
 
+            server_enter_uninterrupted_section( &fd_cache_mutex, &sigset );
+
+            /* remove the handle from the cache, get_apc_result will close it for us */
+            close_inproc_sync( handle );
+
             SERVER_START_REQ( get_apc_result )
             {
                 req->handle = wine_server_obj_handle( handle );
-                if (!(ret = wine_server_call( req ))) *result = reply->result;
+                if (!(ret = server_call_unlocked( req ))) *result = reply->result;
             }
             SERVER_END_REQ;
 
+            server_leave_uninterrupted_section( &fd_cache_mutex, &sigset );
+
             if (!ret && result->type == APC_NONE) continue;  /* APC didn't run, try again */
         }
         return ret;
@@ -1856,12 +1865,17 @@ NTSTATUS WINAPI NtDuplicateObject( HANDLE source_process, HANDLE source, HANDLE
         return result.dup_handle.status;
     }
 
+    /* hold fd_cache_mutex to prevent the fd from being added again between the
+     * call to remove_fd_from_cache and close_handle */
     server_enter_uninterrupted_section( &fd_cache_mutex, &sigset );
 
     /* always remove the cached fd; if the server request fails we'll just
      * retrieve it again */
     if (options & DUPLICATE_CLOSE_SOURCE)
+    {
         fd = remove_fd_from_cache( source );
+        close_inproc_sync( source );
+    }
 
     SERVER_START_REQ( dup_handle )
     {
@@ -1927,11 +1941,14 @@ NTSTATUS WINAPI NtClose( HANDLE handle )
     if (HandleToLong( handle ) >= ~5 && HandleToLong( handle ) <= ~0)
         return STATUS_SUCCESS;
 
+    /* hold fd_cache_mutex to prevent the fd from being added again between the
+     * call to remove_fd_from_cache and close_handle */
     server_enter_uninterrupted_section( &fd_cache_mutex, &sigset );
 
     /* always remove the cached fd; if the server request fails we'll just
      * retrieve it again */
     fd = remove_fd_from_cache( handle );
+    close_inproc_sync( handle );
 
     SERVER_START_REQ( close_handle )
     {
diff --git a/dlls/ntdll/unix/sync.c b/dlls/ntdll/unix/sync.c
index a14f68f012a..ae2f6c07089 100644
--- a/dlls/ntdll/unix/sync.c
+++ b/dlls/ntdll/unix/sync.c
@@ -501,50 +501,215 @@ static NTSTATUS linux_wait_objs( int device, const DWORD count, const int *objs,
 
 #endif /* NTSYNC_IOC_EVENT_READ */
 
+/* It's possible for synchronization primitives to remain alive even after being
+ * closed, because a thread is still waiting on them. It's rare in practice, and
+ * documented as being undefined behaviour by Microsoft, but it works, and some
+ * applications rely on it. This means we need to refcount handles, and defer
+ * deleting them on the server side until the refcount reaches zero. We do this
+ * by having each client process hold a handle to the in-process synchronization
+ * object, as well as a private refcount. When the client refcount reaches zero,
+ * it closes the handle; when all handles are closed, the server deletes the
+ * in-process synchronization object.
+ *
+ * We also need this for signal-and-wait. The signal and wait operations aren't
+ * atomic, but we can't perform the signal and then return STATUS_INVALID_HANDLE
+ * for the wait—we need to either do both operations or neither. That means we
+ * need to grab references to both objects, and prevent them from being
+ * destroyed before we're done with them.
+ *
+ * We want lookup of objects from the cache to be very fast; ideally, it should
+ * be lock-free. We achieve this by using atomic modifications to "refcount",
+ * and guaranteeing that all other fields are valid and correct *as long as*
+ * refcount is nonzero, and we store the entire structure in memory which will
+ * never be freed.
+ *
+ * This means that acquiring the object can't use a simple atomic increment; it
+ * has to use a compare-and-swap loop to ensure that it doesn't try to increment
+ * an object with a zero refcount. That's still leagues better than a real lock,
+ * though, and release can be a single atomic decrement.
+ *
+ * It also means that threads modifying the cache need to take a lock, to
+ * prevent other threads from writing to it concurrently.
+ *
+ * It's possible for an object currently in use (by a waiter) to be closed and
+ * the same handle immediately reallocated to a different object. This should be
+ * a very rare situation, and in that case we simply don't cache the handle.
+ */
 struct inproc_sync
 {
     LONG           refcount;  /* reference count of the sync object */
     int            fd;        /* unix file descriptor */
     unsigned int   access;    /* handle access rights */
-    unsigned int   type;      /* enum inproc_sync_type */
+    unsigned short type;      /* enum inproc_sync_type as short to save space */
+    unsigned short closed;    /* fd has been closed but sync is still referenced */
 };
 
+#define INPROC_SYNC_CACHE_BLOCK_SIZE  (65536 / sizeof(struct inproc_sync))
+#define INPROC_SYNC_CACHE_ENTRIES     128
+
+static struct inproc_sync *inproc_sync_cache[INPROC_SYNC_CACHE_ENTRIES];
+static struct inproc_sync inproc_sync_cache_initial_block[INPROC_SYNC_CACHE_BLOCK_SIZE];
+
+static inline unsigned int inproc_sync_handle_to_index( HANDLE handle, unsigned int *entry )
+{
+    unsigned int idx = (wine_server_obj_handle(handle) >> 2) - 1;
+    *entry = idx / INPROC_SYNC_CACHE_BLOCK_SIZE;
+    return idx % INPROC_SYNC_CACHE_BLOCK_SIZE;
+}
+
+static struct inproc_sync *cache_inproc_sync( HANDLE handle, struct inproc_sync *sync )
+{
+    unsigned int entry, idx = inproc_sync_handle_to_index( handle, &entry );
+    struct inproc_sync *cache;
+    int refcount;
+
+    /* don't cache pseudo-handles; waiting on them is pointless anyway */
+    if ((ULONG)(ULONG_PTR)handle > 0xfffffffa) return sync;
+
+    if (entry >= INPROC_SYNC_CACHE_ENTRIES)
+    {
+        FIXME( "too many allocated handles, not caching %p\n", handle );
+        return sync;
+    }
+
+    if (!inproc_sync_cache[entry])  /* do we need to allocate a new block of entries? */
+    {
+        if (!entry) inproc_sync_cache[0] = inproc_sync_cache_initial_block;
+        else
+        {
+            static const size_t size = INPROC_SYNC_CACHE_BLOCK_SIZE * sizeof(struct inproc_sync);
+            void *ptr = anon_mmap_alloc( size, PROT_READ | PROT_WRITE );
+            if (ptr == MAP_FAILED) return sync;
+            if (InterlockedCompareExchangePointer( (void **)&inproc_sync_cache[entry], ptr, NULL ))
+                munmap( ptr, size ); /* someone beat us to it */
+        }
+    }
+
+    cache = &inproc_sync_cache[entry][idx];
+
+    if (InterlockedCompareExchange( &cache->refcount, 0, 0 ))
+    {
+        /* The handle is currently being used for another object (i.e. it was
+         * closed and then reused, but some thread is waiting on the old handle
+         * or otherwise simultaneously using the old object). We can't cache
+         * this object until the old one is completely destroyed. */
+        return sync;
+    }
+
+    cache->fd = sync->fd;
+    cache->access = sync->access;
+    cache->type = sync->type;
+    cache->closed = sync->closed;
+    /* Make sure we set the other members before the refcount; this store needs
+     * release semantics [paired with the load in get_cached_inproc_sync()].
+     * Set the refcount to 2 (one for the handle, one for the caller). */
+    refcount = InterlockedExchange( &cache->refcount, 2 );
+    assert( !refcount );
+
+    assert( sync->refcount == 1 );
+    memset( sync, 0, sizeof(*sync) );
+
+    return cache;
+}
+
+/* returns the previous value */
+static inline LONG interlocked_inc_if_nonzero( LONG *dest )
+{
+    LONG val, tmp;
+    for (val = *dest;; val = tmp)
+    {
+        if (!val || (tmp = InterlockedCompareExchange( dest, val + 1, val )) == val)
+            break;
+    }
+    return val;
+}
+
 static void release_inproc_sync( struct inproc_sync *sync )
 {
+    /* save the fd now; as soon as the refcount hits 0 we cannot
+     * access the cache anymore */
+    int fd = sync->fd;
     LONG ref = InterlockedDecrement( &sync->refcount );
+
     assert( ref >= 0 );
-    if (!ref) close( sync->fd );
+    if (!ref) close( fd );
 }
 
+static struct inproc_sync *get_cached_inproc_sync( HANDLE handle )
+{
+    unsigned int entry, idx = inproc_sync_handle_to_index( handle, &entry );
+    struct inproc_sync *cache;
+
+    if (entry >= INPROC_SYNC_CACHE_ENTRIES || !inproc_sync_cache[entry]) return NULL;
+
+    cache = &inproc_sync_cache[entry][idx];
+
+    /* this load needs acquire semantics [paired with the store in
+     * cache_inproc_sync()] */
+    if (!interlocked_inc_if_nonzero( &cache->refcount )) return NULL;
+
+    if (cache->closed)
+    {
+        /* The object is still being used, but "handle" has been closed. The
+         * handle value might have been reused for another object in the
+         * meantime, in which case we have to report that valid object, so
+         * force the caller to check the server. */
+        release_inproc_sync( cache );
+        return NULL;
+    }
+
+    return cache;
+}
+
+/* returns a pointer to a cache entry; if the object could not be cached,
+ * returns "cache" instead, which should be allocated on stack */
 static NTSTATUS get_inproc_sync( HANDLE handle, enum inproc_sync_type desired_type, ACCESS_MASK desired_access,
-                                 struct inproc_sync *sync )
+                                 struct inproc_sync *stack, struct inproc_sync **out )
 {
+    struct inproc_sync *sync;
     sigset_t sigset;
     NTSTATUS ret;
 
+    /* try to find it in the cache already */
+    if ((sync = get_cached_inproc_sync( handle ))) goto done;
+
     /* We need to use fd_cache_mutex here to protect against races with
      * other threads trying to receive fds for the fd cache,
-     * and we need to use an uninterrupted section to prevent reentrancy. */
+     * and we need to use an uninterrupted section to prevent reentrancy.
+     * We also need fd_cache_mutex to protect against the same race with
+     * NtClose, that is, to prevent the object from being cached again between
+     * close_inproc_sync() and close_handle. */
     server_enter_uninterrupted_section( &fd_cache_mutex, &sigset );
 
+    if ((sync = get_cached_inproc_sync( handle )))
+    {
+        server_leave_uninterrupted_section( &fd_cache_mutex, &sigset );
+        goto done;
+    }
+
+    /* try to retrieve it from the server */
     SERVER_START_REQ( get_inproc_sync_fd )
     {
         req->handle = wine_server_obj_handle( handle );
         if (!(ret = wine_server_call( req )))
         {
             obj_handle_t fd_handle;
+            sync = stack;
             sync->refcount = 1;
             sync->fd = wine_server_receive_fd( &fd_handle );
             assert( wine_server_ptr_handle(fd_handle) == handle );
             sync->access = reply->access;
             sync->type = reply->type;
+            sync->closed = 0;
         }
     }
     SERVER_END_REQ;
 
+    if (!ret) sync = cache_inproc_sync( handle, sync );
     server_leave_uninterrupted_section( &fd_cache_mutex, &sigset );
 
     if (ret) return ret;
+done:
     if (desired_type != INPROC_SYNC_UNKNOWN && desired_type != sync->type)
     {
         release_inproc_sync( sync );
@@ -556,13 +721,15 @@ static NTSTATUS get_inproc_sync( HANDLE handle, enum inproc_sync_type desired_ty
         return STATUS_ACCESS_DENIED;
     }
 
+    *out = sync;
     return STATUS_SUCCESS;
 }
 
-static NTSTATUS get_inproc_queue_sync( struct inproc_sync *sync )
+static NTSTATUS get_inproc_queue_sync( struct inproc_sync *sync, struct inproc_sync **out )
 {
     sync->refcount = 2; /* prevent closing */
     sync->fd = ntdll_get_thread_data()->queue_sync_fd;
+    *out = sync;
     return STATUS_SUCCESS;
 }
 
@@ -607,13 +774,28 @@ static void unselect_queue( BOOL signaled )
     SERVER_END_REQ;
 }
 
+/* caller must hold fd_cache_mutex */
+void close_inproc_sync( HANDLE handle )
+{
+    struct inproc_sync *cache;
+
+    if (inproc_device_fd < 0) return;
+    if ((cache = get_cached_inproc_sync( handle )))
+    {
+        cache->closed = 1;
+        /* once for the reference we just grabbed, and once for the handle */
+        release_inproc_sync( cache );
+        release_inproc_sync( cache );
+    }
+}
+
 static NTSTATUS inproc_release_semaphore( HANDLE handle, ULONG count, ULONG *prev_count )
 {
-    struct inproc_sync stack, *sync = &stack;
+    struct inproc_sync stack, *sync;
     NTSTATUS ret;
 
     if (inproc_device_fd < 0) return STATUS_NOT_IMPLEMENTED;
-    if ((ret = get_inproc_sync( handle, INPROC_SYNC_SEMAPHORE, SEMAPHORE_MODIFY_STATE, &stack ))) return ret;
+    if ((ret = get_inproc_sync( handle, INPROC_SYNC_SEMAPHORE, SEMAPHORE_MODIFY_STATE, &stack, &sync ))) return ret;
     ret = linux_release_semaphore_obj( sync->fd, count, prev_count );
     release_inproc_sync( sync );
     return ret;
@@ -621,11 +803,11 @@ static NTSTATUS inproc_release_semaphore( HANDLE handle, ULONG count, ULONG *pre
 
 static NTSTATUS inproc_query_semaphore( HANDLE handle, SEMAPHORE_BASIC_INFORMATION *info )
 {
-    struct inproc_sync stack, *sync = &stack;
+    struct inproc_sync stack, *sync;
     NTSTATUS ret;
 
     if (inproc_device_fd < 0) return STATUS_NOT_IMPLEMENTED;
-    if ((ret = get_inproc_sync( handle, INPROC_SYNC_SEMAPHORE, SEMAPHORE_QUERY_STATE, &stack ))) return ret;
+    if ((ret = get_inproc_sync( handle, INPROC_SYNC_SEMAPHORE, SEMAPHORE_QUERY_STATE, &stack, &sync ))) return ret;
     ret = linux_query_semaphore_obj( sync->fd, info );
     release_inproc_sync( sync );
     return ret;
@@ -633,11 +815,11 @@ static NTSTATUS inproc_query_semaphore( HANDLE handle, SEMAPHORE_BASIC_INFORMATI
 
 static NTSTATUS inproc_set_event( HANDLE handle, LONG *prev_state )
 {
-    struct inproc_sync stack, *sync = &stack;
+    struct inproc_sync stack, *sync;
     NTSTATUS ret;
 
     if (inproc_device_fd < 0) return STATUS_NOT_IMPLEMENTED;
-    if ((ret = get_inproc_sync( handle, INPROC_SYNC_EVENT, EVENT_MODIFY_STATE, &stack ))) return ret;
+    if ((ret = get_inproc_sync( handle, INPROC_SYNC_EVENT, EVENT_MODIFY_STATE, &stack, &sync ))) return ret;
     ret = linux_set_event_obj( sync->fd, prev_state );
     release_inproc_sync( sync );
     return ret;
@@ -645,11 +827,11 @@ static NTSTATUS inproc_set_event( HANDLE handle, LONG *prev_state )
 
 static NTSTATUS inproc_reset_event( HANDLE handle, LONG *prev_state )
 {
-    struct inproc_sync stack, *sync = &stack;
+    struct inproc_sync stack, *sync;
     NTSTATUS ret;
 
     if (inproc_device_fd < 0) return STATUS_NOT_IMPLEMENTED;
-    if ((ret = get_inproc_sync( handle, INPROC_SYNC_EVENT, EVENT_MODIFY_STATE, &stack ))) return ret;
+    if ((ret = get_inproc_sync( handle, INPROC_SYNC_EVENT, EVENT_MODIFY_STATE, &stack, &sync ))) return ret;
     ret = linux_reset_event_obj( sync->fd, prev_state );
     release_inproc_sync( sync );
     return ret;
@@ -657,11 +839,11 @@ static NTSTATUS inproc_reset_event( HANDLE handle, LONG *prev_state )
 
 static NTSTATUS inproc_pulse_event( HANDLE handle, LONG *prev_state )
 {
-    struct inproc_sync stack, *sync = &stack;
+    struct inproc_sync stack, *sync;
     NTSTATUS ret;
 
     if (inproc_device_fd < 0) return STATUS_NOT_IMPLEMENTED;
-    if ((ret = get_inproc_sync( handle, INPROC_SYNC_EVENT, EVENT_MODIFY_STATE, &stack ))) return ret;
+    if ((ret = get_inproc_sync( handle, INPROC_SYNC_EVENT, EVENT_MODIFY_STATE, &stack, &sync ))) return ret;
     ret = linux_pulse_event_obj( sync->fd, prev_state );
     release_inproc_sync( sync );
     return ret;
@@ -669,11 +851,11 @@ static NTSTATUS inproc_pulse_event( HANDLE handle, LONG *prev_state )
 
 static NTSTATUS inproc_query_event( HANDLE handle, EVENT_BASIC_INFORMATION *info )
 {
-    struct inproc_sync stack, *sync = &stack;
+    struct inproc_sync stack, *sync;
     NTSTATUS ret;
 
     if (inproc_device_fd < 0) return STATUS_NOT_IMPLEMENTED;
-    if ((ret = get_inproc_sync( handle, INPROC_SYNC_EVENT, EVENT_QUERY_STATE, &stack ))) return ret;
+    if ((ret = get_inproc_sync( handle, INPROC_SYNC_EVENT, EVENT_QUERY_STATE, &stack, &sync ))) return ret;
     ret = linux_query_event_obj( sync->fd, sync->type, info );
     release_inproc_sync( sync );
     return ret;
@@ -681,11 +863,11 @@ static NTSTATUS inproc_query_event( HANDLE handle, EVENT_BASIC_INFORMATION *info
 
 static NTSTATUS inproc_release_mutex( HANDLE handle, LONG *prev_count )
 {
-    struct inproc_sync stack, *sync = &stack;
+    struct inproc_sync stack, *sync;
     NTSTATUS ret;
 
     if (inproc_device_fd < 0) return STATUS_NOT_IMPLEMENTED;
-    if ((ret = get_inproc_sync( handle, INPROC_SYNC_MUTEX, 0, &stack ))) return ret;
+    if ((ret = get_inproc_sync( handle, INPROC_SYNC_MUTEX, 0, &stack, &sync ))) return ret;
     ret = linux_release_mutex_obj( sync->fd, prev_count );
     release_inproc_sync( sync );
     return ret;
@@ -693,11 +875,11 @@ static NTSTATUS inproc_release_mutex( HANDLE handle, LONG *prev_count )
 
 static NTSTATUS inproc_query_mutex( HANDLE handle, MUTANT_BASIC_INFORMATION *info )
 {
-    struct inproc_sync stack, *sync = &stack;
+    struct inproc_sync stack, *sync;
     NTSTATUS ret;
 
     if (inproc_device_fd < 0) return STATUS_NOT_IMPLEMENTED;
-    if ((ret = get_inproc_sync( handle, INPROC_SYNC_MUTEX, MUTANT_QUERY_STATE, &stack ))) return ret;
+    if ((ret = get_inproc_sync( handle, INPROC_SYNC_MUTEX, MUTANT_QUERY_STATE, &stack, &sync ))) return ret;
     ret = linux_query_mutex_obj( sync->fd, info );
     release_inproc_sync( sync );
     return ret;
@@ -717,13 +899,12 @@ static NTSTATUS inproc_wait( DWORD count, const HANDLE *handles, BOOLEAN wait_an
     assert( count <= ARRAY_SIZE(syncs) );
     for (int i = 0; i < count; ++i)
     {
-        if (server_queue && handles[i] == server_queue && !get_inproc_queue_sync( stack + i )) queue = i;
-        else if ((ret = get_inproc_sync( handles[i], INPROC_SYNC_UNKNOWN, SYNCHRONIZE, stack + i )))
+        if (server_queue && handles[i] == server_queue && !get_inproc_queue_sync( stack + i, &syncs[i] )) queue = i;
+        else if ((ret = get_inproc_sync( handles[i], INPROC_SYNC_UNKNOWN, SYNCHRONIZE, stack + i, &syncs[i] )))
         {
             while (i--) release_inproc_sync( syncs[i] );
             return ret;
         }
-        syncs[i] = stack + i;
         objs[i] = syncs[i]->fd;
     }
 
@@ -750,20 +931,20 @@ static NTSTATUS inproc_signal_and_wait( HANDLE signal, HANDLE wait,
                                         BOOLEAN alertable, const LARGE_INTEGER *timeout )
 {
     HANDLE server_queue = UlongToHandle( NtUserGetThreadInfo()->server_queue );
-    struct inproc_sync stack_signal, stack_wait, *signal_sync = &stack_signal, *wait_sync = &stack_wait;
+    struct inproc_sync signal_stack, wait_stack, *signal_sync, *wait_sync;
     NTSTATUS ret;
 
     if (inproc_device_fd < 0) return STATUS_NOT_IMPLEMENTED;
 
-    if ((ret = get_inproc_sync( signal, INPROC_SYNC_UNKNOWN, 0, signal_sync ))) return ret;
+    if ((ret = get_inproc_sync( signal, INPROC_SYNC_UNKNOWN, 0, &signal_stack, &signal_sync ))) return ret;
     if ((ret = check_signal_access( signal_sync )))
     {
         release_inproc_sync( signal_sync );
         return ret;
     }
 
-    if (server_queue && wait == server_queue) get_inproc_queue_sync( wait_sync );
-    else if ((ret = get_inproc_sync( wait, INPROC_SYNC_UNKNOWN, SYNCHRONIZE, wait_sync )))
+    if (server_queue && wait == server_queue) get_inproc_queue_sync( &wait_stack, &wait_sync );
+    else if ((ret = get_inproc_sync( wait, INPROC_SYNC_UNKNOWN, SYNCHRONIZE, &wait_stack, &wait_sync )))
     {
         release_inproc_sync( signal_sync );
         return ret;
diff --git a/dlls/ntdll/unix/thread.c b/dlls/ntdll/unix/thread.c
index 199c88600d1..3296d71bcda 100644
--- a/dlls/ntdll/unix/thread.c
+++ b/dlls/ntdll/unix/thread.c
@@ -1861,8 +1861,15 @@ NTSTATUS get_thread_context( HANDLE handle, void *context, BOOL *self, USHORT ma
 
     if (ret == STATUS_PENDING)
     {
+        sigset_t sigset;
+
         NtWaitForSingleObject( context_handle, FALSE, NULL );
 
+        server_enter_uninterrupted_section( &fd_cache_mutex, &sigset );
+
+        /* remove the handle from the cache, get_thread_context will close it for us */
+        close_inproc_sync( context_handle );
+
         SERVER_START_REQ( get_thread_context )
         {
             req->context = wine_server_obj_handle( context_handle );
@@ -1870,10 +1877,12 @@ NTSTATUS get_thread_context( HANDLE handle, void *context, BOOL *self, USHORT ma
             req->machine = machine;
             req->native_flags = flags & get_native_context_flags( native_machine, machine );
             wine_server_set_reply( req, server_contexts, sizeof(server_contexts) );
-            ret = wine_server_call( req );
+            ret = server_call_unlocked( req );
             count = wine_server_reply_size( reply ) / sizeof(server_contexts[0]);
         }
         SERVER_END_REQ;
+
+        server_leave_uninterrupted_section( &fd_cache_mutex, &sigset );
     }
     if (!ret && count)
     {
diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
index d783a547850..d8db3842e9c 100644
--- a/dlls/ntdll/unix/unix_private.h
+++ b/dlls/ntdll/unix/unix_private.h
@@ -391,6 +391,8 @@ extern NTSTATUS wow64_wine_spawnvp( void *args );
 
 extern void dbg_init(void);
 
+extern void close_inproc_sync( HANDLE handle );
+
 extern NTSTATUS call_user_apc_dispatcher( CONTEXT *context_ptr, unsigned int flags, ULONG_PTR arg1, ULONG_PTR arg2,
                                           ULONG_PTR arg3, PNTAPCFUNC func, NTSTATUS status );
 extern NTSTATUS call_user_exception_dispatcher( EXCEPTION_RECORD *rec, CONTEXT *context );
-- 
2.51.0


From 64eea1fb50ffbde00c10faaf054cff97702a9f3d Mon Sep 17 00:00:00 2001
From: Vasiliy Stelmachenok <ventureo@cachyos.org>
Date: Tue, 23 Sep 2025 14:07:13 +0300
Subject: [PATCH 16/16] Fixup ntsync changes with d3dkmt

Signed-off-by: Vasiliy Stelmachenok <ventureo@cachyos.org>
---
 server/d3dkmt.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/server/d3dkmt.c b/server/d3dkmt.c
index b99fabd3292..2cdb22b703a 100644
--- a/server/d3dkmt.c
+++ b/server/d3dkmt.c
@@ -54,7 +54,7 @@ static const struct object_ops d3dkmt_object_ops =
     NULL,                           /* remove_queue */
     NULL,                           /* signaled */
     NULL,                           /* satisfied */
-    no_signal,                      /* signal */
+    NULL,                           /* signal */
     no_get_fd,                      /* get_fd */
     default_get_sync,               /* get_sync */
     default_map_access,             /* map_access */
-- 
2.51.0

